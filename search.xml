<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode | 1008. Construct Binary Search Tree from Preorder Traversal</title>
      <link href="2020/02/18/Leetcode-1008-Construct-Binary-Search-Tree-from-Preorder-Traversal/"/>
      <url>2020/02/18/Leetcode-1008-Construct-Binary-Search-Tree-from-Preorder-Traversal/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsconstruct-binary-search-tree-from-preorder-traversal"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsconstruct-binary-search-tree-from-preorder-traversal"></a> 【题目链接】<a href="https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/" target="_blank" rel="noopener">https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/</a></h1><h1 id="题目难度medium-751"><a class="markdownIt-Anchor" href="#题目难度medium-751"></a> 【题目难度】Medium 75.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Return the root node of a binary search tree that matches the given preorder traversal.</p><p>(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value &lt; node.val, and any descendant of node.right has a value &gt; node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">8</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">12</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">8</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="literal">null</span>,<span class="number">12</span>]</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>还是要习惯把右边当作不可到达的长度值。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">bstFromPreorder</span><span class="params">(<span class="keyword">int</span>[] preorder)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> helper(preorder, <span class="number">0</span>, preorder.length);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] p, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(left == right) <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> max_ind = right;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt; right; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(p[i] &gt; p[left])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                max_ind = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(p[left]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        root.left = helper(p, left+<span class="number">1</span>, max_ind);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        root.right = helper(p, max_ind, right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 6.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 14. Longest Common Prefix</title>
      <link href="2020/02/18/Leetcode-14-Longest-Common-Prefix/"/>
      <url>2020/02/18/Leetcode-14-Longest-Common-Prefix/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemslongest-common-prefix"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemslongest-common-prefix"></a> 【题目链接】<a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-common-prefix/</a></h1><h1 id="题目难度easy-347"><a class="markdownIt-Anchor" href="#题目难度easy-347"></a> 【题目难度】Easy 34.7%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><p>Example 1:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Input:</span> [<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Output:</span> <span class="string">"fl"</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> N = strs.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(N == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> min_len = strs[<span class="number">0</span>].length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String s : strs)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            min_len = Math.min(min_len, s.length());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        String res = <span class="string">""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min_len; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">char</span> cur = strs[<span class="number">0</span>].charAt(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; strs.length; j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(strs[j].charAt(i) != cur)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            res += cur;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 11.78%<br />Memory: 76.02%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 648. Replace Words</title>
      <link href="2020/02/16/Leetcode-648-Replace-Words/"/>
      <url>2020/02/16/Leetcode-648-Replace-Words/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsreplace-words"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsreplace-words"></a> 【题目链接】<a href="https://leetcode.com/problems/replace-words/" target="_blank" rel="noopener">https://leetcode.com/problems/replace-words/</a></h1><h1 id="题目难度medium-547"><a class="markdownIt-Anchor" href="#题目难度medium-547"></a> 【题目难度】Medium 54.7%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>In English, we have a concept called root, which can be followed by some other words to form another longer word - let’s call this word successor. For example, the root an, followed by other, which can form another word another.</p><p>Now, given a dictionary consisting of many roots and a sentence. You need to replace all the successor in the sentence with the root forming it. If a successor has many roots can form it, replace it with the root with the shortest length.</p><p>You need to output the sentence after the replacement.</p><p>Example 1:</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="type">Input</span>: dict = [<span class="comment">"cat"</span>, <span class="comment">"bat"</span>, <span class="comment">"rat"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sentence = <span class="comment">"the cattle was rattled by the battery"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="type">Output</span>: <span class="comment">"the cat was rat by the bat"</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这道题目给了一些词根，和一句话。要求用词根替换句子里面的词。所以是一道很明显用trie的题。<br />首先是把词根放入trie，因为是要做替换，所以在构建trienode的时候要记录string。然后trienode的function比较多，CPGSSI (containsChild, put, get, setString, setEnd, isEnd)。因为是trie作为prefix，所以在searchprefix的时候就要判断是否是end，否则就不属于这个prefix。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        TrieNode[] children;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> l = <span class="number">26</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">boolean</span> isEnd;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        String string;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsChild</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> children[c - <span class="string">'a'</span>] != <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">char</span> c, TrieNode node)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            children[c - <span class="string">'a'</span>] = node;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> TrieNode <span class="title">get</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> children[c - <span class="string">'a'</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String a)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            string = a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            isEnd = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnd</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> isEnd;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Trie</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        TrieNode root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            root = <span class="keyword">new</span> TrieNode();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">            TrieNode node = root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">char</span> cur = s.charAt(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(!node.containsChild(cur))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">                    node.put(cur, <span class="keyword">new</span> TrieNode());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">                node = node.get(cur);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">            node.setEnd();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">            node.setString(s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">searchPrefix</span><span class="params">(String s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">            TrieNode node = root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">while</span>(!node.isEnd &amp;&amp; i &lt; s.length())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">char</span> cur = s.charAt(i++);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(!node.containsChild(cur)) <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">                node = node.get(cur);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> node.isEnd ? node.string : <span class="string">""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceWords</span><span class="params">(List&lt;String&gt; dict, String sentence)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">        Trie trie = <span class="keyword">new</span> Trie();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String s : dict)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">            trie.insert(s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String s : sentence.split(<span class="string">" "</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">            String r = trie.searchPrefix(s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(r.equals(<span class="string">""</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">                sb.append(s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">                sb.append(r);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">            sb.append(<span class="string">" "</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> sb.substring(<span class="number">0</span>, sb.length() - <span class="number">1</span>).toString();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 99.14%<br />Memory: 75.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 208. Implement Trie (Prefix Tree)</title>
      <link href="2020/02/16/Leetcode-208-Implement-Trie-Prefix-Tree/"/>
      <url>2020/02/16/Leetcode-208-Implement-Trie-Prefix-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsimplement-trie-prefix-tree"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsimplement-trie-prefix-tree"></a> 【题目链接】<a href="https://leetcode.com/problems/implement-trie-prefix-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/implement-trie-prefix-tree/</a></h1><h1 id="题目难度medium-436"><a class="markdownIt-Anchor" href="#题目难度medium-436"></a> 【题目难度】Medium 43.6%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Implement a trie with insert, search, and startsWith methods.</p><p>Example 1:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Trie trie = <span class="built_in">new</span> Trie();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">trie.<span class="keyword">insert</span>("apple");</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">trie.<span class="keyword">search</span>("apple");   // <span class="keyword">returns</span> <span class="keyword">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">trie.<span class="keyword">search</span>("app");     // <span class="keyword">returns</span> <span class="keyword">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">trie.startsWith("app"); // <span class="keyword">returns</span> <span class="keyword">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">trie.<span class="keyword">insert</span>("app");</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">trie.<span class="keyword">search</span>("app");     // <span class="keyword">returns</span> <span class="keyword">true</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>看讲解[<a href="https://leetcode.com/problems/implement-trie-prefix-tree/solution/" target="_blank" rel="noopener">https://leetcode.com/problems/implement-trie-prefix-tree/solution/</a>]</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    TrieNode[] children;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> l = <span class="number">26</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">boolean</span> isEnd;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsChild</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> children[c - <span class="string">'a'</span>] != <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> TrieNode <span class="title">get</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> children[c - <span class="string">'a'</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">char</span> c, TrieNode node)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        children[c - <span class="string">'a'</span>] = node;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        isEnd = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnd</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> isEnd;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    TrieNode root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        root = <span class="keyword">new</span> TrieNode();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** Inserts a word into the trie. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        TrieNode node = root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">char</span> cur = word.charAt(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!node.containsChild(cur))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                node.put(cur, <span class="keyword">new</span> TrieNode());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">            node = node.get(cur);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        node.setEnd();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> TrieNode <span class="title">searchPrefix</span><span class="params">(String word)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">        TrieNode node = root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">char</span> cur = word.charAt(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!node.containsChild(cur)) <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">            node = node.get(cur);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> node;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** Returns if the word is in the trie. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">        TrieNode node = searchPrefix(word);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> node != <span class="keyword">null</span> &amp;&amp; node.isEnd();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">        TrieNode node = searchPrefix(prefix);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> node != <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Trie obj = new Trie();</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * obj.insert(word);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * boolean param_2 = obj.search(word);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * boolean param_3 = obj.startsWith(prefix);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 422. Valid Word Square</title>
      <link href="2020/02/16/Leetcode-422-Valid-Word-Square/"/>
      <url>2020/02/16/Leetcode-422-Valid-Word-Square/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsvalid-word-square"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsvalid-word-square"></a> 【题目链接】<a href="https://leetcode.com/problems/valid-word-square/" target="_blank" rel="noopener">https://leetcode.com/problems/valid-word-square/</a></h1><h1 id="题目难度easy-371"><a class="markdownIt-Anchor" href="#题目难度easy-371"></a> 【题目难度】Easy 37.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a sequence of words, check whether it forms a valid word square.</p><p>A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k &lt; max(numRows, numColumns).</p><p>Note:</p><ol><li>The number of words given is at least 1 and does not exceed 500.</li><li>Word length will be at least 1 and does not exceed 500.</li><li>Each word contains only lowercase English alphabet a-z.</li></ol><p>Example 1:</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"abcd"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"bnrt"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"crmy"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"dtye"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">Output:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">The <span class="built_in">first</span> <span class="built_in">row</span> <span class="keyword">and</span> <span class="built_in">first</span> column both <span class="built_in">read</span> <span class="string">"abcd"</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">The <span class="built_in">second</span> <span class="built_in">row</span> <span class="keyword">and</span> <span class="built_in">second</span> column both <span class="built_in">read</span> <span class="string">"bnrt"</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">The <span class="built_in">third</span> <span class="built_in">row</span> <span class="keyword">and</span> <span class="built_in">third</span> column both <span class="built_in">read</span> <span class="string">"crmy"</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">The <span class="built_in">fourth</span> <span class="built_in">row</span> <span class="keyword">and</span> <span class="built_in">fourth</span> column both <span class="built_in">read</span> <span class="string">"dtye"</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">Therefore, it <span class="built_in">is</span> a valid word square.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>细节挺多的。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validWordSquare</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> N = words.size();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(N != words.get(<span class="number">0</span>).length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">char</span>[][] ca = <span class="keyword">new</span> <span class="keyword">char</span>[N][N];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            String s = words.get(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(s.length() &gt; N) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                ca[i][j] = s.charAt(j);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(ca[i][j] != ca[j][i]) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 98.18%<br />Memory: 16.67%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1037. Valid Boomerang</title>
      <link href="2020/02/16/Leetcode-1037-Valid-Boomerang/"/>
      <url>2020/02/16/Leetcode-1037-Valid-Boomerang/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsvalid-boomerang"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsvalid-boomerang"></a> 【题目链接】<a href="https://leetcode.com/problems/valid-boomerang/" target="_blank" rel="noopener">https://leetcode.com/problems/valid-boomerang/</a></h1><h1 id="题目难度easy-376"><a class="markdownIt-Anchor" href="#题目难度easy-376"></a> 【题目难度】Easy 37.6%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>A boomerang is a set of 3 points that are all distinct and not in a straight line.</p><p>Given a list of three points in the plane, return whether these points are a boomerang.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">2</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="literal">true</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>比较垃圾的题。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBoomerang</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] p1 = points[<span class="number">0</span>], p2 = points[<span class="number">1</span>], p3 = points[<span class="number">2</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(p1[<span class="number">0</span>] == p2[<span class="number">0</span>] &amp;&amp; p1[<span class="number">1</span>] == p2[<span class="number">1</span>] || p1[<span class="number">0</span>] == p3[<span class="number">0</span>] &amp;&amp; p1[<span class="number">1</span>] == p3[<span class="number">1</span>] || p2[<span class="number">0</span>] == p3[<span class="number">0</span>] &amp;&amp; p2[<span class="number">1</span>] == p3[<span class="number">1</span>]) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(p1[<span class="number">0</span>] == p2[<span class="number">0</span>] &amp;&amp; p1[<span class="number">0</span>] == p3[<span class="number">0</span>]) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(p1[<span class="number">1</span>] == p2[<span class="number">1</span>] &amp;&amp; p1[<span class="number">1</span>] == p3[<span class="number">1</span>]) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(p1[<span class="number">0</span>] == p2[<span class="number">0</span>] || p1[<span class="number">0</span>] == p3[<span class="number">0</span>] || p2[<span class="number">0</span>] == p3[<span class="number">0</span>]) <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(p1[<span class="number">1</span>] == p2[<span class="number">1</span>] || p1[<span class="number">1</span>] == p3[<span class="number">1</span>] || p2[<span class="number">1</span>] == p3[<span class="number">1</span>]) <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>)(p1[<span class="number">1</span>] - p2[<span class="number">1</span>]) / (p1[<span class="number">0</span>] - p2[<span class="number">0</span>]) != (<span class="keyword">double</span>)(p1[<span class="number">1</span>] - p3[<span class="number">1</span>]) / (p1[<span class="number">0</span>] - p3[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 240. Search a 2D Matrix II</title>
      <link href="2020/02/15/Leetcode-240-Search-a-2D-Matrix-II/"/>
      <url>2020/02/15/Leetcode-240-Search-a-2D-Matrix-II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemssearch-a-2d-matrix-ii"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemssearch-a-2d-matrix-ii"></a> 【题目链接】<a href="https://leetcode.com/problems/search-a-2d-matrix-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/search-a-2d-matrix-ii/</a></h1><h1 id="题目难度medium-423"><a class="markdownIt-Anchor" href="#题目难度medium-423"></a> 【题目难度】Medium 42.3%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:</p><ul><li>Integers in each row are sorted in ascending from left to right.</li><li>Integers in each column are sorted in ascending from top to bottom.</li></ul><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Consider the following matrix:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  [<span class="number">1</span>,   <span class="number">4</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  [<span class="number">2</span>,   <span class="number">5</span>,  <span class="number">8</span>, <span class="number">12</span>, <span class="number">19</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  [<span class="number">3</span>,   <span class="number">6</span>,  <span class="number">9</span>, <span class="number">16</span>, <span class="number">22</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  [<span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">24</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  [<span class="number">18</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">30</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">Given target = <span class="number">5</span>, <span class="keyword">return</span> <span class="literal">true</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">Given target = <span class="number">20</span>, <span class="keyword">return</span> <span class="literal">false</span>.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>逆向思维啊</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> row = matrix.length - <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> col = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(row &gt;= <span class="number">0</span> &amp;&amp; col &lt; matrix[<span class="number">0</span>].length)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(matrix[row][col] &gt; target)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                row--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[row][col] &lt; target)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                col++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 720. Longest Word in Dictionary</title>
      <link href="2020/02/15/Leetcode-720-Longest-Word-in-Dictionary/"/>
      <url>2020/02/15/Leetcode-720-Longest-Word-in-Dictionary/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemslongest-word-in-dictionary"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemslongest-word-in-dictionary"></a> 【题目链接】<a href="https://leetcode.com/problems/longest-word-in-dictionary/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-word-in-dictionary/</a></h1><h1 id="题目难度easy-470"><a class="markdownIt-Anchor" href="#题目难度easy-470"></a> 【题目难度】Easy 47.0%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a list of strings words representing an English Dictionary, find the longest word in words that can be built one character at a time by other words in words. If there is more than one possible answer, return the longest word with the smallest lexicographical order.</p><p>If there is no answer, return the empty string.</p><p>Example 1:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">words</span> = [<span class="string">"w"</span>,<span class="string">"wo"</span>,<span class="string">"wor"</span>,<span class="string">"worl"</span>, <span class="string">"world"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Output: <span class="string">"world"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">The <span class="built_in">word</span> <span class="string">"world"</span> can be built <span class="literal">one</span> <span class="keyword">character</span> <span class="keyword">at</span> <span class="keyword">a</span> <span class="built_in">time</span> <span class="keyword">by</span> <span class="string">"w"</span>, <span class="string">"wo"</span>, <span class="string">"wor"</span>, <span class="keyword">and</span> <span class="string">"worl"</span>.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestWord</span><span class="params">(String[] words)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        String res = <span class="string">""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String s : words)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            set.add(s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String s : words)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(; i &lt; s.length(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(!set.contains(s.substring(<span class="number">0</span>, i))) <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(i == s.length())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(res.length() &lt; s.length())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                    res = s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(res.length() == s.length())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                    res = helper(s, res);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helper</span><span class="params">(String s, String t)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(s.charAt(i) == t.charAt(i)) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(s.charAt(i) &gt; t.charAt(i))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                flag = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> flag ? s : t;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 16.75%<br />Memory: 6.25%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 399. Evaluate Division</title>
      <link href="2020/02/14/Leetcode-399-Evaluate-Division/"/>
      <url>2020/02/14/Leetcode-399-Evaluate-Division/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsevaluate-division"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsevaluate-division"></a> 【题目链接】<a href="https://leetcode.com/problems/evaluate-division/" target="_blank" rel="noopener">https://leetcode.com/problems/evaluate-division/</a></h1><h1 id="题目难度medium-499"><a class="markdownIt-Anchor" href="#题目难度medium-499"></a> 【题目难度】Medium 49.9%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.</p><p>Example 1:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Given</span> a / b = <span class="number">2.0</span>, b / c = <span class="number">3.0</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? .</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">return [<span class="number">6.0</span>, <span class="number">0.5</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span> ].</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">The</span> input is: vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries , where equations.size() == values.size(), and the values are positive. <span class="symbol">This</span> represents the equations. <span class="symbol">Return</span> vector&lt;double&gt;.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">According</span> to the example above:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">equations = [ [<span class="string">"a"</span>, <span class="string">"b"</span>], [<span class="string">"b"</span>, <span class="string">"c"</span>] ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">values = [<span class="number">2.0</span>, <span class="number">3.0</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">queries = [ [<span class="string">"a"</span>, <span class="string">"c"</span>], [<span class="string">"b"</span>, <span class="string">"a"</span>], [<span class="string">"a"</span>, <span class="string">"e"</span>], [<span class="string">"a"</span>, <span class="string">"a"</span>], [<span class="string">"x"</span>, <span class="string">"x"</span>] ].</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        Map&lt;String, String&gt; parent; <span class="comment">// &lt;node, parent of node&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        Map&lt;String, Double&gt; ratio; <span class="comment">// &lt;node, parent / node&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">()</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            parent = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            ratio = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">find</span><span class="params">(String p)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(p.equals(parent.get(p)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            String father = parent.get(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            String grandfather = parent.get(father);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            parent.put(p, grandfather);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            ratio.put(p, ratio.get(p) * ratio.get(father));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> parent.get(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(String p, String q, <span class="keyword">double</span> val)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!parent.containsKey(p))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                parent.put(p, p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                ratio.put(p, <span class="number">1.0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!parent.containsKey(q))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                parent.put(q, q);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                ratio.put(q, <span class="number">1.0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            String rootp = find(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            String rootq = find(q);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            parent.put(rootq, rootp);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            ratio.put(rootq, ratio.get(p) * val / ratio.get(q));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span>[] calcEquation(List&lt;List&lt;String&gt;&gt; equations, <span class="keyword">double</span>[] values, List&lt;List&lt;String&gt;&gt; queries) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = queries.size();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">double</span>[] res = <span class="keyword">new</span> <span class="keyword">double</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; equations.size(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">            List&lt;String&gt; list = equations.get(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            String p = list.get(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">            String q = list.get(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            uf.union(p, q, values[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">            List&lt;String&gt; query = queries.get(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">            String p = query.get(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">            String q = query.get(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!uf.parent.containsKey(p) || !uf.parent.containsKey(q) || !uf.find(p).equals(uf.find(q)))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">                res[i] = -<span class="number">1.0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">                res[i] = uf.ratio.get(q) / uf.ratio.get(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 7.84%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Union Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1319. Number of Operations to Make Network Connected</title>
      <link href="2020/02/14/Leetcode-1319-Number-of-Operations-to-Make-Network-Connected/"/>
      <url>2020/02/14/Leetcode-1319-Number-of-Operations-to-Make-Network-Connected/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsnumber-of-operations-to-make-network-connected"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsnumber-of-operations-to-make-network-connected"></a> 【题目链接】<a href="https://leetcode.com/problems/number-of-operations-to-make-network-connected/" target="_blank" rel="noopener">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a></h1><h1 id="题目难度medium-505"><a class="markdownIt-Anchor" href="#题目难度medium-505"></a> 【题目难度】Medium 50.5%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>There are n computers numbered from 0 to n-1 connected by ethernet cables connections forming a network where connections[i] = [a, b] represents a connection between computers a and b. Any computer can reach any other computer directly or indirectly through the network.</p><p>Given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return the minimum number of times you need to do this in order to make all the computers connected. If it’s not possible, return -1.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: n = <span class="number">4</span>, connections = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">2</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: Remove cable between computer <span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">and</span> place between computers <span class="number">1</span> <span class="keyword">and</span> <span class="number">3.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] parent;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> count;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            count = n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                parent[i] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(p == parent[p])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> parent[p] = find(parent[p]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootp = find(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootq = find(q);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(rootp == rootq)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            parent[rootq] = rootp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            count--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">makeConnected</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] connections)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(n);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> unused = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] c : connections)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">boolean</span> flag = uf.union(c[<span class="number">0</span>], c[<span class="number">1</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!flag)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                unused++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> unused &gt;= (uf.count-<span class="number">1</span>) ? (uf.count-<span class="number">1</span>) : -<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 92.13%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> union Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 323. Number of Connected Components in an Undirected Graph</title>
      <link href="2020/02/14/Leetcode-323-Number-of-Connected-Components-in-an-Undirected-Graph/"/>
      <url>2020/02/14/Leetcode-323-Number-of-Connected-Components-in-an-Undirected-Graph/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsnumber-of-connected-components-in-an-undirected-graph"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsnumber-of-connected-components-in-an-undirected-graph"></a> 【题目链接】<a href="https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/" target="_blank" rel="noopener">https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/</a></h1><h1 id="题目难度542"><a class="markdownIt-Anchor" href="#题目难度542"></a> 【题目难度】54.2%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: n = <span class="number">5</span> <span class="keyword">and</span> edges = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">     <span class="number">0</span>          <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     |          |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     <span class="number">1</span> --- <span class="number">2</span>    <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">2</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>典型的找连同分量的个数，没有任何trick。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] parent;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> count;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            count = n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                parent[i] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(p == parent[p])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> parent[p] = find(parent[p]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootp = find(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootq = find(q);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(rootp != rootq)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                parent[rootq] = rootp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                count--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countComponents</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] edges)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(n);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] e : edges)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            uf.union(e[<span class="number">0</span>], e[<span class="number">1</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> uf.count;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Union Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 947. Most Stones Removed with Same Row or Column</title>
      <link href="2020/02/14/Leetcode-947-Most-Stones-Removed-with-Same-Row-or-Column/"/>
      <url>2020/02/14/Leetcode-947-Most-Stones-Removed-with-Same-Row-or-Column/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsmost-stones-removed-with-same-row-or-column"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsmost-stones-removed-with-same-row-or-column"></a> 【题目链接】<a href="https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/" target="_blank" rel="noopener">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a></h1><h1 id="题目难度medium-548"><a class="markdownIt-Anchor" href="#题目难度medium-548"></a> 【题目难度】Medium 54.8%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>On a 2D plane, we place stones at some integer coordinate points.  Each coordinate point may have at most one stone.</p><p>Now, a move consists of removing a stone that shares a column or row with another stone on the grid.</p><p>What is the largest possible number of moves we can make?</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: stones = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">5</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] parent;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> count;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            count = n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                parent[i] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(p == parent[p])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> parent[p] = find(parent[p]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootp = find(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootq = find(q);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(rootp != rootq)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                parent[rootq] = rootp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                count--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeStones</span><span class="params">(<span class="keyword">int</span>[][] stones)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> N = stones.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(N);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(i != j &amp;&amp; (stones[i][<span class="number">0</span>] == stones[j][<span class="number">0</span>] || stones[i][<span class="number">1</span>] == stones[j][<span class="number">1</span>]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">                    uf.union(i, j);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> N - uf.count;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 25.74%<br />Memory: 78.54%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> DFS </tag>
            
            <tag> Union Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 684. Redundant Connection</title>
      <link href="2020/02/13/Leetcode-684-Redundant-Connection/"/>
      <url>2020/02/13/Leetcode-684-Redundant-Connection/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsredundant-connection"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsredundant-connection"></a> 【题目链接】<a href="https://leetcode.com/problems/redundant-connection/" target="_blank" rel="noopener">https://leetcode.com/problems/redundant-connection/</a></h1><h1 id="题目难度medium-552"><a class="markdownIt-Anchor" href="#题目难度medium-552"></a> 【题目难度】Medium 55.2%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>In this problem, a tree is an undirected graph that is connected and has no cycles.</p><p>The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, …, N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.</p><p>The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u &lt; v, that represents an undirected edge connecting nodes u and v.</p><p>Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u &lt; v.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">2</span>,<span class="number">3</span>], [<span class="number">3</span>,<span class="number">4</span>], [<span class="number">1</span>,<span class="number">4</span>], [<span class="number">1</span>,<span class="number">5</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">1</span>,<span class="number">4</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: The given undirected graph will be like <span class="keyword">this</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> - <span class="number">1</span> - <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    |   |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="number">4</span> - <span class="number">3</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>等做完union find了再来写。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] parent;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                parent[i] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(p == parent[p])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> parent[p] = find(parent[p]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootp = find(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootq = find(q);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(rootp == rootq)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            parent[rootp] = rootq;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findRedundantConnection(<span class="keyword">int</span>[][] edges) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> N = edges.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(N + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] e : edges)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!uf.union(e[<span class="number">0</span>], e[<span class="number">1</span>]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;e[<span class="number">0</span>], e[<span class="number">1</span>]&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 63.64%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Union Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1135. Connecting Cities With Minimum Cost</title>
      <link href="2020/02/13/Leetcode-1135-Connecting-Cities-With-Minimum-Cost/"/>
      <url>2020/02/13/Leetcode-1135-Connecting-Cities-With-Minimum-Cost/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsconnecting-cities-with-minimum-cost"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsconnecting-cities-with-minimum-cost"></a> 【题目链接】<a href="https://leetcode.com/problems/connecting-cities-with-minimum-cost/" target="_blank" rel="noopener">https://leetcode.com/problems/connecting-cities-with-minimum-cost/</a></h1><h1 id="题目难度medium-562"><a class="markdownIt-Anchor" href="#题目难度medium-562"></a> 【题目难度】Medium 56.2%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>There are N cities numbered from 1 to N.</p><p>You are given connections, where each connections[i] = [city1, city2, cost] represents the cost to connect city1 and city2 together.  (A connection is bidirectional: connecting city1 and city2 is the same as connecting city2 and city1.)</p><p>Return the minimum cost so that for every pair of cities, there exists a path of connections (possibly of length 1) that connects those two cities together.  The cost is the sum of the connection costs used. If the task is impossible, return -1.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: N = <span class="number">3</span>, connections = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Choosing any <span class="number">2</span> edges will connect all cities so we choose the minimum <span class="number">2.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>等做完union find了再来写。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> count, total_cost;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] parent;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            count = n - <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            total_cost = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                parent[i] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(p == parent[p])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> parent[p] = find(parent[p]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q, <span class="keyword">int</span> cost)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootp = find(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootq = find(q);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(rootp != rootq)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                parent[rootq] = rootp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                count--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                total_cost += cost;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumCost</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span>[][] connections)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        Arrays.sort(connections, (n1, n2)-&gt;n1[<span class="number">2</span>] - n2[<span class="number">2</span>]); <span class="comment">//先sort，然后往里加就应该是最小的cost</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(N + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] n : connections)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            uf.union(n[<span class="number">0</span>], n[<span class="number">1</span>], n[<span class="number">2</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(uf.count &gt; <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> uf.total_cost;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 91.31%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Union Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1061. Lexicographically Smallest Equivalent String</title>
      <link href="2020/02/13/Leetcode-1061-Lexicographically-Smallest-Equivalent-String/"/>
      <url>2020/02/13/Leetcode-1061-Lexicographically-Smallest-Equivalent-String/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemslexicographically-smallest-equivalent-string"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemslexicographically-smallest-equivalent-string"></a> 【题目链接】<a href="https://leetcode.com/problems/lexicographically-smallest-equivalent-string/" target="_blank" rel="noopener">https://leetcode.com/problems/lexicographically-smallest-equivalent-string/</a></h1><h1 id="题目难度medium-641"><a class="markdownIt-Anchor" href="#题目难度medium-641"></a> 【题目难度】Medium 64.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given strings A and B of the same length, we say A[i] and B[i] are equivalent characters. For example, if A = “abc” and B = “cde”, then we have ‘a’ == ‘c’, ‘b’ == ‘d’, ‘c’ == ‘e’.</p><p>Equivalent characters follow the usual rules of any equivalence relation:</p><p>Reflexivity: ‘a’ == ‘a’<br />Symmetry: ‘a’ == ‘b’ implies ‘b’ == ‘a’<br />Transitivity: ‘a’ == ‘b’ and ‘b’ == ‘c’ implies ‘a’ == ‘c’<br />For example, given the equivalency information from A and B above, S = “eed”, “acd”, and “aab” are equivalent strings, and “aab” is the lexicographically smallest equivalent string of S.</p><p>Return the lexicographically smallest equivalent string of S by using the equivalency information from A and B.</p><p>Example 1:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: A = <span class="string">"parker"</span>, B = <span class="string">"morris"</span>, S = <span class="string">"parser"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="string">"makkek"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: Based on the equivalency information <span class="keyword">in</span> A <span class="keyword">and</span> B, we can<span class="built_in"> group </span>their characters as [m,p], [a,o], [k,r,s], [e,i]. The characters <span class="keyword">in</span> each<span class="built_in"> group </span>are equivalent <span class="keyword">and</span> sorted <span class="keyword">in</span> lexicographical order. So the answer is <span class="string">"makkek"</span>.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>等做完union find了再来写。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] parent;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                parent[i] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(p == parent[p])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> parent[p] = find(parent[p]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootp = find(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootq = find(q);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> min = Math.min(rootp, rootq); <span class="comment">// 一直选择最小的当root</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            parent[rootp] = min;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            parent[rootq] = min;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">smallestEquivalentString</span><span class="params">(String A, String B, String S)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = A.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(<span class="number">26</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            uf.union(A.charAt(i) - <span class="string">'a'</span>, B.charAt(i) - <span class="string">'a'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : S.toCharArray())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            res.append((<span class="keyword">char</span>)(<span class="string">'a'</span> + uf.find(c - <span class="string">'a'</span>)));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res.toString();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Union Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 959. Regions Cut By Slashes</title>
      <link href="2020/02/13/Leetcode-959-Regions-Cut-By-Slashes/"/>
      <url>2020/02/13/Leetcode-959-Regions-Cut-By-Slashes/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsregions-cut-by-slashes"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsregions-cut-by-slashes"></a> 【题目链接】<a href="https://leetcode.com/problems/regions-cut-by-slashes/" target="_blank" rel="noopener">https://leetcode.com/problems/regions-cut-by-slashes/</a></h1><h1 id="题目难度medium-648"><a class="markdownIt-Anchor" href="#题目难度medium-648"></a> 【题目难度】Medium 64.8%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>In a N x N grid composed of 1 x 1 squares, each 1 x 1 square consists of a /, , or blank space.  These characters divide the square into contiguous regions.</p><p>(Note that backslash characters are escaped, so a \ is represented as “\”.)</p><p>Return the number of regions.</p><p>Example 1:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Input:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">" /"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"/ "</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Output:</span> <span class="number">2</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>等做完union find了再来写。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> count;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] parent;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            count = n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                parent[i] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(p == parent[p])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> parent[p] = find(parent[p]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootp = find(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootq = find(q);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(rootp != rootq)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                parent[rootp] = rootq;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                count--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">regionsBySlashes</span><span class="params">(String[] grid)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> N = grid.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(N * N * <span class="number">4</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">char</span> cur = grid[i].charAt(j);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">int</span> root = (i * N + j) * <span class="number">4</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(cur != <span class="string">'\\'</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                    uf.union(root + <span class="number">0</span>, root + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">                    uf.union(root + <span class="number">2</span>, root + <span class="number">3</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(cur != <span class="string">'/'</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">                    uf.union(root + <span class="number">0</span>, root + <span class="number">3</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                    uf.union(root + <span class="number">1</span>, root + <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                <span class="comment">//Union down</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(i &lt; N - <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">                    uf.union(root + <span class="number">2</span>, ((i + <span class="number">1</span>) * N + j) * <span class="number">4</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">                <span class="comment">//Union right</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(j &lt; N - <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">                    uf.union(root + <span class="number">3</span>, (i * N + j + <span class="number">1</span>) * <span class="number">4</span> + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> uf.count;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 95.88%<br />Memory: 25.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Union Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1101. The Earliest Moment When Everyone Become Friends</title>
      <link href="2020/02/13/Leetcode-1101-The-Earliest-Moment-When-Everyone-Become-Friends/"/>
      <url>2020/02/13/Leetcode-1101-The-Earliest-Moment-When-Everyone-Become-Friends/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsthe-earliest-moment-when-everyone-become-friends"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsthe-earliest-moment-when-everyone-become-friends"></a> 【题目链接】<a href="https://leetcode.com/problems/the-earliest-moment-when-everyone-become-friends/" target="_blank" rel="noopener">https://leetcode.com/problems/the-earliest-moment-when-everyone-become-friends/</a></h1><h1 id="题目难度medium-649"><a class="markdownIt-Anchor" href="#题目难度medium-649"></a> 【题目难度】Medium 64.9%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>In a social group, there are N people, with unique integer ids from 0 to N-1.</p><p>We have a list of logs, where each logs[i] = [timestamp, id_A, id_B] contains a non-negative integer timestamp, and the ids of two different people.</p><p>Each log represents the time in which two different people became friends.  Friendship is symmetric: if A is friends with B, then B is friends with A.</p><p>Let’s say that person A is acquainted with person B if A is friends with B, or A is a friend of someone acquainted with B.</p><p>Return the earliest time for which every person became acquainted with every other person. Return -1 if there is no such earliest time.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: logs = [[<span class="number">20190101</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">20190104</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">20190107</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">20190211</span>,<span class="number">1</span>,<span class="number">5</span>],[<span class="number">20190224</span>,<span class="number">2</span>,<span class="number">4</span>],[<span class="number">20190301</span>,<span class="number">0</span>,<span class="number">3</span>],[<span class="number">20190312</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">20190322</span>,<span class="number">4</span>,<span class="number">5</span>]], N = <span class="number">6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">20190301</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">The first event occurs at timestamp = <span class="number">20190101</span> <span class="keyword">and</span> after <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span> become friends we have the following friendship groups [<span class="number">0</span>,<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>], [<span class="number">5</span>].</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">The second event occurs at timestamp = <span class="number">20190104</span> <span class="keyword">and</span> after <span class="number">3</span> <span class="keyword">and</span> <span class="number">4</span> become friends we have the following friendship groups [<span class="number">0</span>,<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>].</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">The third event occurs at timestamp = <span class="number">20190107</span> <span class="keyword">and</span> after <span class="number">2</span> <span class="keyword">and</span> <span class="number">3</span> become friends we have the following friendship groups [<span class="number">0</span>,<span class="number">1</span>], [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>].</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">The fourth event occurs at timestamp = <span class="number">20190211</span> <span class="keyword">and</span> after <span class="number">1</span> <span class="keyword">and</span> <span class="number">5</span> become friends we have the following friendship groups [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>], [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">The fifth event occurs at timestamp = <span class="number">20190224</span> <span class="keyword">and</span> as <span class="number">2</span> <span class="keyword">and</span> <span class="number">4</span> are already friend anything happens.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">The sixth event occurs at timestamp = <span class="number">20190301</span> <span class="keyword">and</span> after <span class="number">0</span> <span class="keyword">and</span> <span class="number">3</span> become friends we have that all become friends.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>等做完union find了再来写。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> count;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] parent;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            count = n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                parent[i] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(p == parent[p])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> parent[p] = find(parent[p]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> q)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootp = find(p);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> rootq = find(q);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(rootp != rootq)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                parent[rootp] = rootq;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                count--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">earliestAcq</span><span class="params">(<span class="keyword">int</span>[][] logs, <span class="keyword">int</span> N)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        Arrays.sort(logs, (l1, l2) -&gt; l1[<span class="number">0</span>] - l2[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        UnionFind uf = <span class="keyword">new</span> UnionFind(N);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; logs.length; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> time = logs[i][<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(uf.find(logs[i][<span class="number">1</span>]) != uf.find(logs[i][<span class="number">2</span>]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                uf.union(logs[i][<span class="number">1</span>], logs[i][<span class="number">2</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(uf.count == <span class="number">1</span>) <span class="keyword">return</span> time;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 98.01%<br />Memory: 50.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Union Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 109. Convert Sorted List to Binary Search Tree</title>
      <link href="2020/02/12/Leetcode-109-Convert-Sorted-List-to-Binary-Search-Tree/"/>
      <url>2020/02/12/Leetcode-109-Convert-Sorted-List-to-Binary-Search-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsconvert-sorted-list-to-binary-search-tree"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsconvert-sorted-list-to-binary-search-tree"></a> 【题目链接】<a href="https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/</a></h1><h1 id="题目难度medium-447"><a class="markdownIt-Anchor" href="#题目难度medium-447"></a> 【题目难度】Medium 44.7%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p><p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Given the sorted linked list: [<span class="number">-10</span>,<span class="number">-3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">One possible answer <span class="keyword">is</span>: [<span class="number">0</span>,<span class="number">-3</span>,<span class="number">9</span>,<span class="number">-10</span>,<span class="literal">null</span>,<span class="number">5</span>], which represents the following height balanced BST:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">     / \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   <span class="number">-3</span>   <span class="number">9</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">   /   /</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"> <span class="number">-10</span>  <span class="number">5</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>快慢指针找中点，再递归生成左右子树，这里要注意的是判断list是否只有一个元素，否则的话会是死循环。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        ListNode fast = head, slow = head, pre = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            pre = slow;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            slow = slow.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            fast = fast.next.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(pre != <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            pre.next = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(slow.val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(head == slow) <span class="keyword">return</span> root; <span class="comment">// 判断是否是有一个元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        root.left = sortedListToBST(head);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        root.right = sortedListToBST(slow.next);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 5.26%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1120. Maximum Average Subtree</title>
      <link href="2020/02/12/Leetcode-1120-Maximum-Average-Subtree/"/>
      <url>2020/02/12/Leetcode-1120-Maximum-Average-Subtree/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsmaximum-average-subtree"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsmaximum-average-subtree"></a> 【题目链接】 <a href="https://leetcode.com/problems/maximum-average-subtree/" target="_blank" rel="noopener">https://leetcode.com/problems/maximum-average-subtree/</a></h1><h1 id="题目难度-medium-619"><a class="markdownIt-Anchor" href="#题目难度-medium-619"></a> 【题目难度】 Medium 61.9%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given the root of a binary tree, find the maximum average value of any subtree of that tree.</p><p>(A subtree of a tree is any node of that tree plus all its descendants. The average value of a tree is the sum of its values, divided by the number of nodes.)</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">6.00000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">For the node with value = <span class="number">5</span> we have an average of (<span class="number">5</span> + <span class="number">6</span> + <span class="number">1</span>) / <span class="number">3</span> = <span class="number">4.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">For the node with value = <span class="number">6</span> we have an average of <span class="number">6</span> / <span class="number">1</span> = <span class="number">6.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">For the node with value = <span class="number">1</span> we have an average of <span class="number">1</span> / <span class="number">1</span> = <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">So the answer <span class="keyword">is</span> <span class="number">6</span> which <span class="keyword">is</span> the maximum.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>求子树最大的平均数。那么这道题又是分别对待root参与和不参与。先左右递归一下，再处理包含root的。这里有一个trick需要学习一下，本来一开始那道题看到需要求平均值，就想到每个node是需要两个值保存，一个sum，一个count，但是又不会写Pair的class，怎么办呢？学习到了用两个HashMap&lt;TreeNode, Integer&gt;来保存每个node的属性。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Map&lt;TreeNode, Double&gt; sum_map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    Map&lt;TreeNode, Integer&gt; count_map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">double</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">maximumAverageSubtree</span><span class="params">(TreeNode root)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">double</span> left = maximumAverageSubtree(root.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">double</span> right = maximumAverageSubtree(root.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">double</span> average = helper(root);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> Math.max(Math.max(left, right), average);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        helper(root.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        helper(root.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            sum += sum_map.get(root.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            count += count_map.get(root.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            sum += sum_map.get(root.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            count += count_map.get(root.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        sum += root.val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        count++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        sum_map.put(root, sum);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        count_map.put(root, count);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> sum / count;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 5.01%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
            <tag> Postorder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 687. Longest Univalue Path</title>
      <link href="2020/02/12/Leetcode-687-Longest-Univalue-Path/"/>
      <url>2020/02/12/Leetcode-687-Longest-Univalue-Path/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemslongest-univalue-path"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemslongest-univalue-path"></a> 【题目链接】<a href="https://leetcode.com/problems/longest-univalue-path/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-univalue-path/</a></h1><h1 id="题目难度easy-351"><a class="markdownIt-Anchor" href="#题目难度easy-351"></a> 【题目难度】Easy 35.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.</p><p>The length of path between two nodes is represented by the number of edges between them.</p><p>Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">              <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">             <span class="string">/</span> <span class="string">\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="number">4</span>   <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">           <span class="string">/</span> <span class="string">\</span>   <span class="string">\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">          <span class="number">1</span>   <span class="number">1</span>   <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="number">2</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>返回最长的path长度，要求path所有node都有相同的值，这条path包不包括root都可以。这种包不包括root都可以的题，肯定要包括和不包括比较一下，不包括又分为两种，左边和右边，所以又需要比较一下。重点是实现包括root的code，我的实现是从root往两边走，然后把两边加起来。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestUnivaluePath</span><span class="params">(TreeNode root)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// not include root</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> left = longestUnivaluePath(root.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> right = longestUnivaluePath(root.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = Math.max(left, right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// include root</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        res = Math.max(res, helper(root.left, root.val) + helper(root.right, root.val));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root, <span class="keyword">int</span> target)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span> || root.val != target) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> Math.max(helper(root.left, target), helper(root.right, target)) + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 11.63%<br />Memory: 10.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 96. Unique Binary Search Trees</title>
      <link href="2020/02/12/Leetcode-96-Unique-Binary-Search-Trees/"/>
      <url>2020/02/12/Leetcode-96-Unique-Binary-Search-Trees/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsunique-binary-search-trees"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsunique-binary-search-trees"></a> 【题目链接】<a href="https://leetcode.com/problems/unique-binary-search-trees/" target="_blank" rel="noopener">https://leetcode.com/problems/unique-binary-search-trees/</a></h1><h1 id="题目难度medium-384"><a class="markdownIt-Anchor" href="#题目难度medium-384"></a> 【题目难度】Medium 38.4%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n?</p><p>Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Explanation:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="string">Given</span> <span class="string">n</span> <span class="string">=</span> <span class="number">3</span><span class="string">,</span> <span class="string">there</span> <span class="string">are</span> <span class="string">a</span> <span class="string">total</span> <span class="string">of</span> <span class="number">5</span> <span class="string">unique</span> <span class="string">BST's:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   <span class="number">1</span>         <span class="number">3</span>     <span class="number">3</span>      <span class="number">2</span>      <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="string">\</span>       <span class="string">/</span>     <span class="string">/</span>      <span class="string">/</span> <span class="string">\</span>      <span class="string">\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     <span class="number">3</span>     <span class="number">2</span>     <span class="number">1</span>      <span class="number">1</span>   <span class="number">3</span>      <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="string">/</span>     <span class="string">/</span>       <span class="string">\</span>                 <span class="string">\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   <span class="number">2</span>     <span class="number">1</span>         <span class="number">2</span>                 <span class="number">3</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这道题的问题是，有多少种可能性？一般就会想到用dfs，但是结果dfs的时间复杂度很高。仔细想想，这个问题其实是存在子问题，如果用G(n)代表最终答案，也就是从1到n的所有BST的数量，F(i)表示i当root时所有BST的数量，那么G(n) = F(1) + F(2) + … + (n)。对于F(i)，既然是i当root，那么左边的就是左子树，右边的就是右子树，F(i) = G(i-1)*G(n-i)。所以G(n) = sum(i = 1…n, G(i-1)*G(n-i)).<br />所以整个程序先有一个for loop（i长度），再有一个for loop（j当root）去计算G(i)，直到计算G(n).</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                dp[i] += dp[j-<span class="number">1</span>] * dp[i-j];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> dp[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 5.55%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1261. Find Elements in a Contaminated Binary Tree</title>
      <link href="2020/02/12/Leetcode-1261-Find-Elements-in-a-Contaminated-Binary-Tree/"/>
      <url>2020/02/12/Leetcode-1261-Find-Elements-in-a-Contaminated-Binary-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsfind-elements-in-a-contaminated-binary-tree"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsfind-elements-in-a-contaminated-binary-tree"></a> 【题目链接】 <a href="https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/</a></h1><h1 id="题目难度-medium-726"><a class="markdownIt-Anchor" href="#题目难度-medium-726"></a> 【题目难度】 Medium 72.6%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a binary tree with the following rules:</p><ol><li>root.val == 0</li><li>If treeNode.val == x and treeNode.left != null, then treeNode.left.val == 2 * x + 1</li><li>If treeNode.val == x and treeNode.right != null, then treeNode.right.val == 2 * x + 2<br />Now the binary tree is contaminated, which means all treeNode.val have been changed to -1.</li></ol><p>You need to first recover the binary tree and then implement the FindElements class:</p><ul><li>FindElements(TreeNode* root) Initializes the object with a contamined binary tree, you need to recover it first.</li><li>bool find(int target) Return if the target value exists in the recovered binary tree.</li></ul><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[<span class="string">"FindElements"</span>,<span class="string">"find"</span>,<span class="string">"find"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[[[<span class="number">-1</span>,<span class="literal">null</span>,<span class="number">-1</span>]],[<span class="number">1</span>],[<span class="number">2</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Output</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">[<span class="literal">null</span>,<span class="literal">false</span>,<span class="literal">true</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Explanation</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">FindElements findElements = new FindElements([<span class="number">-1</span>,<span class="literal">null</span>,<span class="number">-1</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">findElements.find(<span class="number">1</span>); <span class="comment">// return False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">findElements.find(<span class="number">2</span>); <span class="comment">// return True</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目很简单，想到用set记录值再以O(1)查找target就行。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindElements</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Set&lt;Integer&gt; set;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FindElements</span><span class="params">(TreeNode root)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        set = <span class="keyword">new</span> HashSet();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        helper(root, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        root.val = val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        set.add(val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>) helper(root.left, val * <span class="number">2</span> + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span>) helper(root.right, val * <span class="number">2</span> + <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> set.contains(target);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 35.37%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1325. Delete Leaves With a Given Value</title>
      <link href="2020/02/11/Leetcode-1325-Delete-Leaves-With-a-Given-Value/"/>
      <url>2020/02/11/Leetcode-1325-Delete-Leaves-With-a-Given-Value/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsdelete-leaves-with-a-given-value"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsdelete-leaves-with-a-given-value"></a> 【题目链接】 <a href="https://leetcode.com/problems/delete-leaves-with-a-given-value/" target="_blank" rel="noopener">https://leetcode.com/problems/delete-leaves-with-a-given-value/</a></h1><h1 id="题目难度-medium-733"><a class="markdownIt-Anchor" href="#题目难度-medium-733"></a> 【题目难度】 Medium 73.3%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a binary tree root and an integer target, delete all the leaf nodes with value target.</p><p>Note that once you delete a leaf node with value target, if it’s parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you can’t).</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">4</span>], target = <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">4</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: Leaf nodes <span class="keyword">in</span> green with value (target = <span class="number">2</span>) are removed (Picture <span class="keyword">in</span> left).</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">After removing, new nodes become leaf nodes with value (target = <span class="number">2</span>) (Picture <span class="keyword">in</span> center).</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这道题和814一样都是postorder。两者的共同点是，先动左右子树，root的去留是根据左右子树的状态来决定。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">removeLeafNodes</span><span class="params">(TreeNode root, <span class="keyword">int</span> target)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        root.left = removeLeafNodes(root.left, target);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        root.right = removeLeafNodes(root.right, target);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.val == target &amp;&amp; root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
            <tag> Postorder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 814. Binary Tree Pruning</title>
      <link href="2020/02/11/Leetcode-814-Binary-Tree-Pruning/"/>
      <url>2020/02/11/Leetcode-814-Binary-Tree-Pruning/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsbinary-tree-pruning"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsbinary-tree-pruning"></a> 【题目链接】 <a href="https://leetcode.com/problems/binary-tree-pruning/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-pruning/</a></h1><h1 id="题目难度-medium-730"><a class="markdownIt-Anchor" href="#题目难度-medium-730"></a> 【题目难度】 Medium 73.0%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>We are given the head node root of a binary tree, where additionally every node’s value is either a 0 or a 1.</p><p>Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.</p><p>(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Example <span class="number">1</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">0</span>,<span class="literal">null</span>,<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Only the red nodes satisfy the <span class="keyword">property</span> <span class="string">"every subtree not containing a 1"</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">The diagram on the right represents the answer.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这道题是先处理左右子树再判断root。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">pruneTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        root.left = pruneTree(root.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        root.right = pruneTree(root.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.val == <span class="number">0</span> &amp;&amp; root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 5.88%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
            <tag> Postorder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 366. Find Leaves of Binary Tree</title>
      <link href="2020/02/11/Leetcode-366-Find-Leaves-of-Binary-Tree/"/>
      <url>2020/02/11/Leetcode-366-Find-Leaves-of-Binary-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsfind-leaves-of-binary-tree"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsfind-leaves-of-binary-tree"></a> 【题目链接】<a href="https://leetcode.com/problems/find-leaves-of-binary-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/find-leaves-of-binary-tree/</a></h1><h1 id="题目难度medium-69"><a class="markdownIt-Anchor" href="#题目难度medium-69"></a> 【题目难度】Medium 69%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a binary tree, collect a tree’s nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">          <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">         / \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="number">2</span>   <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">       / \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="number">4</span>   <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">Output: [[<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>],[<span class="number">2</span>],[<span class="number">1</span>]]</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这道题是要将叶子节点一层一层去掉直到root为空。一开始拿到这个题没有太多思路，想到的是dfs，但是不知道什么时候停止把out加入res。看了其他人的答案后，发现root是每完全去掉一次就更新的，所以需要一个while loop到root为空，所以helper的return就是root，input就是root和out，因为要把叶子节点存到out再删掉，然后更新了root之后就把out给res。recursive更新左右子树。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; findLeaves(TreeNode root) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            List&lt;Integer&gt; out = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            root = helper(root, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            res.add(<span class="keyword">new</span> ArrayList(out));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">helper</span><span class="params">(TreeNode root, List&lt;Integer&gt; out)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            out.add(root.val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        root.left = helper(root.left, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        root.right = helper(root.right, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 6.82%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 797. All Paths From Source to Target</title>
      <link href="2020/02/10/Leetcode-797-All-Paths-From-Source-to-Target/"/>
      <url>2020/02/10/Leetcode-797-All-Paths-From-Source-to-Target/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsall-paths-from-source-to-target"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsall-paths-from-source-to-target"></a> 【题目链接】 <a href="https://leetcode.com/problems/all-paths-from-source-to-target/" target="_blank" rel="noopener">https://leetcode.com/problems/all-paths-from-source-to-target/</a></h1><h1 id="题目难度-medium-731"><a class="markdownIt-Anchor" href="#题目难度-medium-731"></a> 【题目难度】 Medium 73.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a directed, acyclic graph of N nodes.  Find all possible paths from node 0 to node N-1, and return them in any order.</p><p>The graph is given as follows:  the nodes are 0, 1, …, graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">3</span>], []]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: The graph looks like <span class="keyword">this</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>---&gt;<span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">|    |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">v    v</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>---&gt;<span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">There are two paths: <span class="number">0</span> -&gt; <span class="number">1</span> -&gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">0</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>就是一道很典型的dfs找出所有path的题。需要的是一个visited数组来记录哪些是走过了的避免重复走。然后就是遍历邻接节点之后要将out和visited复原。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">boolean</span>[] visited;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; allPathsSourceTarget(<span class="keyword">int</span>[][] graph) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = graph.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        List&lt;Integer&gt; out = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        out.add(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        visited[<span class="number">0</span>] = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        dfs(graph, <span class="number">0</span>, res, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] g, <span class="keyword">int</span> start, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; out)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(start == g.length - <span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            res.add(<span class="keyword">new</span> ArrayList(out));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : g[start])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!visited[n])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                visited[n] = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                out.add(n);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                dfs(g, n, res, out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                visited[n] = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                out.remove(out.size() - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 99.51%<br />Memory: 25.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1198. Find Smallest Common Element in All Rows</title>
      <link href="2020/02/10/Leetcode-1198-Find-Smallest-Common-Element-in-All-Rows/"/>
      <url>2020/02/10/Leetcode-1198-Find-Smallest-Common-Element-in-All-Rows/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsfind-smallest-common-element-in-all-rows"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsfind-smallest-common-element-in-all-rows"></a> 【题目链接】<a href="https://leetcode.com/problems/find-smallest-common-element-in-all-rows/" target="_blank" rel="noopener">https://leetcode.com/problems/find-smallest-common-element-in-all-rows/</a></h1><h1 id="题目难度medium-742"><a class="markdownIt-Anchor" href="#题目难度medium-742"></a> 【题目难度】Medium 74.2%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a matrix mat where every row is sorted in increasing order, return the smallest common element in all rows.</p><p>If there is no common element, return -1.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: mat = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>],[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">5</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>给定一个矩阵，每行都是sorted，找出最小的common value。从每一行的第一个数开始，纵向的最大是可能的答案，找到最大之后再在每个数组里找有没有这个数，如果有就是答案，如果没有就往后看一格。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">smallestCommonElement</span><span class="params">(<span class="keyword">int</span>[][] mat)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = mat.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> m = mat[<span class="number">0</span>].length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> max_ind = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(max_ind &lt; m)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> max = get_max(mat, a);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(mat[i][a[i]] &lt; max)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    flag = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                    max_ind = Math.max(max_ind, ++a[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(flag == <span class="keyword">false</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> max;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get_max</span><span class="params">(<span class="keyword">int</span>[][] mat, <span class="keyword">int</span>[] a)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = mat[<span class="number">0</span>][a[<span class="number">0</span>]];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            res = Math.max(res, mat[i][a[i]]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 55.43%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1305. All Elements in Two Binary Search Trees</title>
      <link href="2020/02/10/Leetcode-1305-All-Elements-in-Two-Binary-Search-Trees/"/>
      <url>2020/02/10/Leetcode-1305-All-Elements-in-Two-Binary-Search-Trees/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsall-elements-in-two-binary-search-trees"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsall-elements-in-two-binary-search-trees"></a> 【题目链接】<a href="https://leetcode.com/problems/all-elements-in-two-binary-search-trees/" target="_blank" rel="noopener">https://leetcode.com/problems/all-elements-in-two-binary-search-trees/</a></h1><h1 id="题目难度medium-746"><a class="markdownIt-Anchor" href="#题目难度medium-746"></a> 【题目难度】Medium 74.6%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given two binary search trees root1 and root2.</p><p>Return a list containing all the integers from both trees sorted in ascending order.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: root1 = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>], root2 = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>一开始看到两个树需要merge排好序，就开始想dfs，结果怎么想都不对。后来一想，就两个tree都inorder遍历一遍得到两个sorted array，再merge就行了。这里考察的点就是inorder和merge sorted array。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    List&lt;Integer&gt; list;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getAllElements</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        list = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        inorder(root1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        List&lt;Integer&gt; l1 = <span class="keyword">new</span> ArrayList(list);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        list = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        inorder(root2);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        List&lt;Integer&gt; l2 = <span class="keyword">new</span> ArrayList(list);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> merge(l1, l2);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        inorder(root.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        list.add(root.val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        inorder(root.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">merge</span><span class="params">(List&lt;Integer&gt; l1, List&lt;Integer&gt; l2)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(i &lt; l1.size() &amp;&amp; j &lt; l2.size())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l1.get(i) &gt; l2.get(j))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                res.add(l2.get(j++));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                res.add(l1.get(i++));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(i &lt; l1.size())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            res.add(l1.get(i++));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(j &lt; l2.size())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            res.add(l2.get(j++));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 93.01%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1347. Minimum Number of Steps to Make Two Strings Anagram</title>
      <link href="2020/02/10/Leetcode-1347-Minimum-Number-of-Steps-to-Make-Two-Strings-Anagram/"/>
      <url>2020/02/10/Leetcode-1347-Minimum-Number-of-Steps-to-Make-Two-Strings-Anagram/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsminimum-number-of-steps-to-make-two-strings-anagram"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsminimum-number-of-steps-to-make-two-strings-anagram"></a> 【题目链接】 <a href="https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram/" target="_blank" rel="noopener">https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram/</a></h1><h1 id="题目难度-medium-769"><a class="markdownIt-Anchor" href="#题目难度-medium-769"></a> 【题目难度】 Medium 76.9%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given two equal-size strings s and t. In one step you can choose any character of t and replace it with another character.</p><p>Return the minimum number of steps to make t an anagram of s.</p><p>An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.</p><p>Example 1:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Inpu<span class="variable">t:</span> s = <span class="string">"bab"</span>, t = <span class="string">"aba"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Outpu<span class="variable">t:</span> <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: Replace the <span class="keyword">first</span> <span class="string">'a'</span> in t with <span class="keyword">b</span>, t = <span class="string">"bba"</span> which <span class="keyword">is</span> anagram of s.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>看到string只有lowercase就知道是用int[26]来count再比较。比较的时候一开始把所有的差值都加上了，其实不对。以上面的例子，如果把所有差值加起来，那就是2，但结果是1.这是因为当s的某个值比t少时，就可以把另外的多余变成这个值，这样就减少2，但变化却是1.所以就只需要统计当s少于t的时候了。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSteps</span><span class="params">(String s, String t)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] scount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] tcount = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            scount[c - <span class="string">'a'</span>]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : t.toCharArray())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            tcount[c - <span class="string">'a'</span>]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            sum += tcount[i] &gt; scount[i] ? <span class="number">0</span> : Math.abs(scount[i] - tcount[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 92.02%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 654. Maximum Binary Tree</title>
      <link href="2020/02/10/Leetcode-654-Maximum-Binary-Tree/"/>
      <url>2020/02/10/Leetcode-654-Maximum-Binary-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsmaximum-binary-tree"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsmaximum-binary-tree"></a> 【题目链接】<a href="https://leetcode.com/problems/maximum-binary-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/maximum-binary-tree/</a></h1><h1 id="题目难度medium-782"><a class="markdownIt-Anchor" href="#题目难度medium-782"></a> 【题目难度】Medium 78.2%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:</p><ol><li>The root is the maximum number in the array.</li><li>The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.</li><li>The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.<br />Construct the maximum tree by the given array and output the root node of this tree.</li></ol><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">5</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="keyword">return</span> the tree root node representing the following tree:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      <span class="number">6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    /   \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   <span class="number">3</span>     <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    \    /</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">     <span class="number">2</span>  <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">       \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="number">1</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>最大的数作为root，左边的形成左子树，右边的形成右子树。时间复杂度是O(n2)。因为找最大值是O(n),再形成是O(n)。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructMaximumBinaryTree</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> helper(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> max = nums[left];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> max_ind = left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt;= right; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(nums[i] &gt; max)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                max = nums[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                max_ind = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(nums[max_ind]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        root.left = helper(nums, left, max_ind - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        root.right = helper(nums, max_ind + <span class="number">1</span>, right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 37.50%<br />Memory: 6.52%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1038. Binary Search Tree to Greater Sum Tree</title>
      <link href="2020/02/10/Leetcode-1038-Binary-Search-Tree-to-Greater-Sum-Tree/"/>
      <url>2020/02/10/Leetcode-1038-Binary-Search-Tree-to-Greater-Sum-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsbinary-search-tree-to-greater-sum-tree"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsbinary-search-tree-to-greater-sum-tree"></a> 【题目链接】 <a href="https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/</a></h1><h1 id="题目难度-medium-790"><a class="markdownIt-Anchor" href="#题目难度-medium-790"></a> 【题目难度】 Medium 79.0%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given the root of a binary search tree with distinct values, modify it so that every node has a new value equal to the sum of the values of the original tree that are greater than or equal to node.val.</p><p>As a reminder, a binary search tree is a tree that satisfies these constraints:</p><ul><li>The left subtree of a node contains only nodes with keys less than the node’s key.</li><li>The right subtree of a node contains only nodes with keys greater than the node’s key.</li><li>Both the left and right subtrees must also be binary search trees.</li></ul><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">8</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">30</span>,<span class="number">36</span>,<span class="number">21</span>,<span class="number">36</span>,<span class="number">35</span>,<span class="number">26</span>,<span class="number">15</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">33</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">8</span>]</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>还记得之前拿到这道题还得使劲分析一下，知道大概怎么做但是写code还有点犹豫。但这次竟然就很通畅，一次bug free，还是挺开心的。这种一看就是dfs加上累计信息的，就是要有一个global variable去记录和更新。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">bstToGst</span><span class="params">(TreeNode root)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        dfs(root);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        dfs(root.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        root.val += sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        sum = root.val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        dfs(root.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1282. Group the People Given the Group Size They Belong To</title>
      <link href="2020/02/10/Leetcode-1282-Group-the-People-Given-the-Group-Size-They-Belong-To/"/>
      <url>2020/02/10/Leetcode-1282-Group-the-People-Given-the-Group-Size-They-Belong-To/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsgroup-the-people-given-the-group-size-they-belong-to"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsgroup-the-people-given-the-group-size-they-belong-to"></a> 【题目链接】<a href="https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/" target="_blank" rel="noopener">https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/</a></h1><h1 id="题目难度medium-835"><a class="markdownIt-Anchor" href="#题目难度medium-835"></a> 【题目难度】Medium 83.5%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>There are n people whose IDs go from 0 to n - 1 and each person belongs exactly to one group. Given the array groupSizes of length n telling the group size each person belongs to, return the groups there are and the people’s IDs each group includes.</p><p>You can return any solution in any order and the same applies for IDs. Also, it is guaranteed that there exists at least one solution.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: groupSizes = [<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [[<span class="number">5</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Other possible solutions are [[<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>],[<span class="number">5</span>],[<span class="number">0</span>,<span class="number">4</span>,<span class="number">3</span>]] <span class="keyword">and</span> [[<span class="number">5</span>],[<span class="number">0</span>,<span class="number">6</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>]].</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目的输入是一个数组，里面的值代表这个坐标所属group的size。需要返回每个组的成员。所以这里用hashmap&lt;Integer, List&gt;来储存size和成员。然后再对于每一个size都去组成组，多的就新建组。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; groupThePeople(<span class="keyword">int</span>[] g) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g.length; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            List&lt;Integer&gt; a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map.containsKey(g[i]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                a = map.get(g[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                a = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            a.add(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            map.put(g[i], a);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : map.keySet())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            List&lt;Integer&gt; a = map.get(n);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(a.size() == n)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                res.add(a);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size() / n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                        list.add(a.get(i * n + j));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                    res.add(list);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 51.13%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1315. Sum of Nodes with Even-Valued Grandparent</title>
      <link href="2020/02/10/Leetcode-1315-Sum-of-Nodes-with-Even-Valued-Grandparent/"/>
      <url>2020/02/10/Leetcode-1315-Sum-of-Nodes-with-Even-Valued-Grandparent/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemssum-of-nodes-with-even-valued-grandparent"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemssum-of-nodes-with-even-valued-grandparent"></a> 【题目链接】 <a href="https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent/" target="_blank" rel="noopener">https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent/</a></h1><h1 id="题目难度-837"><a class="markdownIt-Anchor" href="#题目难度-837"></a> 【题目难度】 83.7%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a binary tree, return the sum of values of nodes with even-valued grandparent.  (A grandparent of a node is the parent of its parent, if it exists.)</p><p>If there are no nodes with an even-valued grandparent, return 0.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: root = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">5</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">18</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: The red nodes are the nodes with even-value grandparent <span class="keyword">while</span> the blue nodes are the even-value grandparents.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目的输入是一个二叉树。要求sum这些node，如果node的grandparent是偶数值。很容易想到是dfs，sum作为全局变量，dfs的input是当前node和parent是否为偶数。然后判断左右子树是否应该加入sum。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumEvenGrandparent</span><span class="params">(TreeNode root)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        dfs(root, <span class="keyword">false</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">boolean</span> peven)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; peven) sum += root.left.val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span> &amp;&amp; peven) sum += root.right.val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        dfs(root.left, root.val % <span class="number">2</span> == <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        dfs(root.right, root.val % <span class="number">2</span> == <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 99.75%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1265. Print Immutable Linked List in Reverse</title>
      <link href="2020/02/10/Leetcode-1265-Print-Immutable-Linked-List-in-Reverse/"/>
      <url>2020/02/10/Leetcode-1265-Print-Immutable-Linked-List-in-Reverse/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsprint-immutable-linked-list-in-reverse"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsprint-immutable-linked-list-in-reverse"></a> 【题目链接】 <a href="https://leetcode.com/problems/print-immutable-linked-list-in-reverse/" target="_blank" rel="noopener">https://leetcode.com/problems/print-immutable-linked-list-in-reverse/</a></h1><h1 id="题目难度-medium-925"><a class="markdownIt-Anchor" href="#题目难度-medium-925"></a> 【题目难度】 Medium 92.5%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:</p><p>ImmutableListNode: An interface of immutable linked list, you are given the head of the list.<br />You need to use the following functions to access the linked list (you can’t access the ImmutableListNode directly):</p><p>ImmutableListNode.printValue(): Print value of the current node.<br />ImmutableListNode.getNext(): Return the next node.<br />The input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.</p><p>Follow up:</p><p>Could you solve this problem in:</p><p>Constant space complexity?<br />Linear time complexity and less than linear space complexity?</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: head = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这道题接受率92.5%…为什么是道medium呢？</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * // This is the ImmutableListNode's API interface.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * interface ImmutableListNode &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> *     public void printValue(); // print the value of this node.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> *     public ImmutableListNode getNext(); // return the next node.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * &#125;;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLinkedListInReverse</span><span class="params">(ImmutableListNode head)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(head.getNext() == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            head.printValue();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            printLinkedListInReverse(head.getNext());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            head.printValue();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 88.73%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1302. Deepest Leaves Sum</title>
      <link href="2020/02/09/Leetcode-1302-Deepest-Leaves-Sum/"/>
      <url>2020/02/09/Leetcode-1302-Deepest-Leaves-Sum/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsdeepest-leaves-sum"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsdeepest-leaves-sum"></a> 【题目链接】 <a href="https://leetcode.com/problems/deepest-leaves-sum/" target="_blank" rel="noopener">https://leetcode.com/problems/deepest-leaves-sum/</a></h1><h1 id="题目难度-medium-837"><a class="markdownIt-Anchor" href="#题目难度-medium-837"></a> 【题目难度】 Medium 83.7%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a binary tree, return the sum of values of its deepest leaves.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">8</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">15</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目要求返回最深的根的和。这里有两点，深度和和。采用的是dfs，遇到leave随时更新最深的深度和结果和。这种需要在dfs时随时更新的variable就需要是static的全局变量。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> max_depth = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deepestLeavesSum</span><span class="params">(TreeNode root)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        dfs(root, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> depth)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(depth == max_depth)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                sum += root.val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(depth &gt; max_depth)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                max_depth = depth;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                sum = root.val;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            dfs(root.left, depth + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            dfs(root.right, depth + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 160. Intersection of Two Linked Lists</title>
      <link href="2020/02/09/Leetcode-160-Intersection-of-Two-Linked-Lists/"/>
      <url>2020/02/09/Leetcode-160-Intersection-of-Two-Linked-Lists/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsintersection-of-two-linked-lists"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsintersection-of-two-linked-lists"></a> 【题目链接】<a href="https://leetcode.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">https://leetcode.com/problems/intersection-of-two-linked-lists/</a></h1><h1 id="题目难度easy-376"><a class="markdownIt-Anchor" href="#题目难度easy-376"></a> 【题目难度】Easy 37.6%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Write a program to find the node at which the intersection of two singly linked lists begins.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: <span class="built_in">int</span>ersectVal = <span class="number">8</span>, listA = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>], listB = [<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>], skipA = <span class="number">2</span>, skipB = <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: Reference of the node with value = <span class="number">8</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Input Explanation: The <span class="built_in">int</span>ersected node<span class="string">'s value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>返回两个list重合的地方，这个题要不是之前看到过好几次要我一下子想出来也挺难的。就是用两个指针交换scan，直到指到相同的node就是答案，或者两个的next都是空，说明没有这样的node存在，就返回null。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        ListNode n1 = headA;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        ListNode n2 = headB;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(n1 != n2)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(n1.next == <span class="keyword">null</span> &amp;&amp; n2.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            n1 = n1.next == <span class="keyword">null</span> ? headB : n1.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            n2 = n2.next == <span class="keyword">null</span> ? headA : n2.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> n1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 98.72%<br />Memory: 5.71%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 624. Maximum Distance in Arrays</title>
      <link href="2020/02/09/Leetcode-624-Maximum-Distance-in-Arrays/"/>
      <url>2020/02/09/Leetcode-624-Maximum-Distance-in-Arrays/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsmaximum-distance-in-arrays"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsmaximum-distance-in-arrays"></a> 【题目链接】 <a href="https://leetcode.com/problems/maximum-distance-in-arrays/" target="_blank" rel="noopener">https://leetcode.com/problems/maximum-distance-in-arrays/</a></h1><h1 id="题目难度-easy-384"><a class="markdownIt-Anchor" href="#题目难度-easy-384"></a> 【题目难度】 Easy 38.4%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given m arrays, and each array is sorted in ascending order. Now you can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a-b|. Your task is to find the maximum distance.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> [<span class="number">4</span>,<span class="number">5</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">One way to reach the maximum distance <span class="number">4</span> <span class="keyword">is</span> to pick <span class="number">1</span> <span class="keyword">in</span> the first <span class="keyword">or</span> third <span class="built_in">array</span> <span class="keyword">and</span> pick <span class="number">5</span> <span class="keyword">in</span> the second <span class="built_in">array</span>.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目给定一系列的sorted array，distance定义为来自两个不同array的元素最大的差的绝对值。一开始拿到这道题，竟然无从下手。看了答案之后，才知道其实就是按照逻辑想就行，既然是sorted array，与最大差值有关，就只需要每个array考虑开头和结尾，每轮到一个array，就更新results和最小值和最大值，这样就避免了同一个array的两个值组成结果。这里应该就是这道题的难点，不能从同一个array中取两个数。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDistance</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; arrays)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, min_val = arrays.get(<span class="number">0</span>).get(<span class="number">0</span>), max_val = arrays.get(<span class="number">0</span>).get(arrays.get(<span class="number">0</span>).size() - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arrays.size(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            res = Math.max(res, Math.max(Math.abs(arrays.get(i).get(<span class="number">0</span>) - max_val),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                  Math.abs(arrays.get(i).get(arrays.get(i).size() - <span class="number">1</span>) - min_val)));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            min_val = Math.min(min_val, arrays.get(i).get(<span class="number">0</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            max_val = Math.max(max_val, arrays.get(i).get(arrays.get(i).size() - <span class="number">1</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 72.08%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 205. Isomorphic Strings</title>
      <link href="2020/02/09/Leetcode-205-Isomorphic-Strings/"/>
      <url>2020/02/09/Leetcode-205-Isomorphic-Strings/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsisomorphic-strings"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsisomorphic-strings"></a> 【题目链接】 <a href="https://leetcode.com/problems/isomorphic-strings/" target="_blank" rel="noopener">https://leetcode.com/problems/isomorphic-strings/</a></h1><h1 id="题目难度-389"><a class="markdownIt-Anchor" href="#题目难度-389"></a> 【题目难度】 38.9%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given two strings s and t, determine if they are isomorphic.</p><p>Two strings are isomorphic if the characters in s can be replaced to get t.</p><p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p><p>Example 1:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span> s = <span class="string">"paper"</span>, t = <span class="string">"title"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">Output:</span> <span class="literal">true</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>读完题目知道是用hashmap建立一个映射，然后遍历所有位置，如果映射包含了s到t的这两个字符映射，就继续，如果没有包含s的字符却包含了t的字符，说明t的字符已经被映射了，返回false，如果包含了s的字符，映射却不是t的字符，也返回false。这里难点在于这句话“No two characters may map to the same character”</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        Map&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">char</span> a = s.charAt(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">char</span> b = t.charAt(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map.containsKey(a))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(map.get(a) != b)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(map.containsValue(b))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                map.put(a, b);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 75.46%<br />Memory: 45.61%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 155. Min Stack</title>
      <link href="2020/02/09/Leetcode-155-Min-Stack/"/>
      <url>2020/02/09/Leetcode-155-Min-Stack/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemsmin-stack"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemsmin-stack"></a> 【题目链接】<a href="https://leetcode.com/problems/min-stack/" target="_blank" rel="noopener">https://leetcode.com/problems/min-stack/</a></h1><h1 id="题目难度easy-407"><a class="markdownIt-Anchor" href="#题目难度easy-407"></a> 【题目难度】Easy 40.7%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p><ul><li>push(x) – Push element x onto stack.</li><li>pop() – Removes the element on top of the stack.</li><li>top() – Get the top element.</li><li>getMin() – Retrieve the minimum element in the stack.</li></ul><p>Example 1:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">MinStack minStack = new MinStack()<span class="comment">;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">minStack.push(-<span class="number">2</span>)<span class="comment">;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">minStack.push(<span class="number">0</span>)<span class="comment">;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">minStack.push(-<span class="number">3</span>)<span class="comment">;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">minStack.getMin()<span class="comment">;   --&gt; Returns -3.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">minStack.pop()<span class="comment">;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">minStack.top()<span class="comment">;      --&gt; Returns 0.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">minStack.getMin()<span class="comment">;   --&gt; Returns -2.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>只有getMin这个功能需要实现。很容易想到的就是用另一个stack给导出来，同时找到min。或者一开始就用list来储存，找min的时候遍历一遍list，就可以省下一个stack的空间，但是时间上没有优势。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    List&lt;Integer&gt; s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        s = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        s.add(x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        size += <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        s.remove(size - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        size -= <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> s.get(size - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            min = Math.min(min, s.get(i));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> min;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 5.06%<br />Memory: 18.84%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 342. Power of Four</title>
      <link href="2020/02/09/Leetcode-342-Power-of-Four/"/>
      <url>2020/02/09/Leetcode-342-Power-of-Four/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemspower-of-four"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemspower-of-four"></a> 【题目链接】 <a href="https://leetcode.com/problems/power-of-four/" target="_blank" rel="noopener">https://leetcode.com/problems/power-of-four/</a></h1><h1 id="题目难度-easy-411"><a class="markdownIt-Anchor" href="#题目难度-easy-411"></a> 【题目难度】 Easy 41.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p><p>Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="number">16</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="literal">true</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目要看是否是4的倍数，还不准用loop和recursion。那么就是看bit了。这里要记住两个小trick：</p><ul><li>是否是2的次方 <code>(n &gt; 0) &amp;&amp; ((n &amp; (n - 1)) == 0)</code></li><li>是否是4的次方 <code>(n &gt; 0) &amp;&amp; ((n &amp; (n - 1)) == 0) &amp;&amp; (n % 3 == 1)</code></li></ul><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> (num &gt; <span class="number">0</span>) &amp;&amp; ((num &amp; (num - <span class="number">1</span>)) == <span class="number">0</span>) &amp;&amp; (num % <span class="number">3</span> == <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 6.67%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 734. Sentence Similarity</title>
      <link href="2020/02/09/Leetcode-734-Sentence-Similarity/"/>
      <url>2020/02/09/Leetcode-734-Sentence-Similarity/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemssentence-similarity"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemssentence-similarity"></a> 【题目链接】 <a href="https://leetcode.com/problems/sentence-similarity/" target="_blank" rel="noopener">https://leetcode.com/problems/sentence-similarity/</a></h1><h1 id="题目难度-easy-416"><a class="markdownIt-Anchor" href="#题目难度-easy-416"></a> 【题目难度】 Easy 41.6%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given two sentences words1, words2 (each represented as an array of strings), and a list of similar word pairs pairs, determine if two sentences are similar.</p><p>For example, “great acting skills” and “fine drama talent” are similar, if the similar word pairs are pairs = [[“great”, “fine”], [“acting”,“drama”], [“skills”,“talent”]].</p><p>Note that the similarity relation is not transitive. For example, if “great” and “fine” are similar, and “fine” and “good” are similar, “great” and “good” are not necessarily similar.</p><p>However, similarity is symmetric. For example, “great” and “fine” being similar is the same as “fine” and “great” being similar.</p><p>Also, a word is always similar with itself. For example, the sentences words1 = [“great”], words2 = [“great”], pairs = [] are similar, even though there are no specified similar word pairs.</p><p>Finally, sentences can only be similar if they have the same number of words. So a sentence like words1 = [“great”] can never be similar to words2 = [“doubleplus”,“good”].</p><p>Note:</p><ul><li>The length of words1 and words2 will not exceed 1000.</li><li>The length of pairs will not exceed 2000.</li><li>The length of each pairs[i] will be 2.</li><li>The length of each words[i] and pairs[i][j] will be in the range [1, 20].</li></ul><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这个题目没有将太清楚，看了答案才知道是只需要比较相对的位置的word是否similar。不过看完题大概就知道是用hashset或者hashmap储存pair，再去比较两个sentence。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areSentencesSimilar</span><span class="params">(String[] words1, String[] words2, List&lt;List&lt;String&gt;&gt; pairs)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(words1.length != words2.length)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(List&lt;String&gt; list : pairs)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            set.add(list.get(<span class="number">0</span>) + <span class="string">"_"</span> + list.get(<span class="number">1</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words1.length; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!words1[i].equals(words2[i]) &amp;&amp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                !set.contains(words1[i] + <span class="string">"_"</span> + words2[i]) &amp;&amp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                !set.contains(words2[i] + <span class="string">"_"</span> + words1[i]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 9.73%<br />Memory: 25.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 643. Maximum Average Subarray I</title>
      <link href="2020/02/08/Leetcode-643-Maximum-Average-Subarray-I/"/>
      <url>2020/02/08/Leetcode-643-Maximum-Average-Subarray-I/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsmaximum-average-subarray-i"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsmaximum-average-subarray-i"></a> 【题目链接】 <a href="https://leetcode.com/problems/maximum-average-subarray-i/" target="_blank" rel="noopener">https://leetcode.com/problems/maximum-average-subarray-i/</a></h1><h1 id="题目难度-easy-408"><a class="markdownIt-Anchor" href="#题目难度-easy-408"></a> 【题目难度】 Easy 40.8%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">12</span>,<span class="number">-5</span>,<span class="number">-6</span>,<span class="number">50</span>,<span class="number">3</span>], k = <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">12.75</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: Maximum average <span class="keyword">is</span> (<span class="number">12</span><span class="number">-5</span><span class="number">-6</span>+<span class="number">50</span>)/<span class="number">4</span> = <span class="number">51</span>/<span class="number">4</span> = <span class="number">12.75</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目要求找出长度为k同时平均值最大的子串，返回这个平均值。那就是维持一个k长度的sliding window去计算平均值，并且随时更新result。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMaxAverage</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">double</span> start = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            start += nums[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">double</span> res = start;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt; nums.length; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            start += nums[i] - nums[i - k];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            res = Math.max(res, start);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res / k;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 91.37%<br />Memory: 53.85%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 716. Max Stack</title>
      <link href="2020/02/08/Leetcode-716-Max-Stack/"/>
      <url>2020/02/08/Leetcode-716-Max-Stack/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsmax-stack"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsmax-stack"></a> 【题目链接】 <a href="https://leetcode.com/problems/max-stack/" target="_blank" rel="noopener">https://leetcode.com/problems/max-stack/</a></h1><h1 id="题目难度-420"><a class="markdownIt-Anchor" href="#题目难度-420"></a> 【题目难度】 42.0%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Design a max stack that supports push, pop, top, peekMax and popMax.</p><ol><li>push(x) – Push element x onto stack.</li><li>pop() – Remove the element on top of the stack and return it.</li><li>top() – Get the element on the top.</li><li>peekMax() – Retrieve the maximum element in the stack.</li><li>popMax() – Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.</li></ol><p>Example 1:</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">MaxStack stack = new MaxStack();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">stack.push(<span class="number">5</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">stack.push(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">stack.push(<span class="number">5</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">stack</span>.top(); -&gt;</span> <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">stack</span>.popMax(); -&gt;</span> <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">stack</span>.top(); -&gt;</span> <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">stack</span>.peekMax(); -&gt;</span> <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">stack</span>.pop(); -&gt;</span> <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">stack</span>.top(); -&gt;</span> <span class="number">5</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>在导出导入的过程中，要用相同的structure，stack for stack， queue for queue。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxStack</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Stack&lt;Integer&gt; stack;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxStack</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        stack = <span class="keyword">new</span> Stack();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        stack.push(x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> stack.pop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> stack.peek();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peekMax</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        Stack&lt;Integer&gt; aux = <span class="keyword">new</span> Stack();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> cur = stack.pop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            max = Math.max(max, cur);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            aux.push(cur);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(!aux.isEmpty())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            stack.push(aux.pop());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> max;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">popMax</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        Stack&lt;Integer&gt; aux = <span class="keyword">new</span> Stack();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> max = peekMax();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(stack.peek() != max)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">                aux.push(stack.pop());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">        stack.pop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(!aux.isEmpty())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            stack.push(aux.pop());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> max;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 5.05%<br />Memory: 91.67%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 225. Implement Stack using Queues</title>
      <link href="2020/02/08/Leetcode-225-Implement-Stack-using-Queues/"/>
      <url>2020/02/08/Leetcode-225-Implement-Stack-using-Queues/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsimplement-stack-using-queues"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsimplement-stack-using-queues"></a> 【题目链接】 <a href="https://leetcode.com/problems/implement-stack-using-queues/" target="_blank" rel="noopener">https://leetcode.com/problems/implement-stack-using-queues/</a></h1><h1 id="题目难度-easy-426"><a class="markdownIt-Anchor" href="#题目难度-easy-426"></a> 【题目难度】 Easy 42.6%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Implement the following operations of a stack using queues.</p><ul><li>push(x) – Push element x onto stack.</li><li>pop() – Removes the element on top of the stack.</li><li>top() – Get the top element.</li><li>empty() – Return whether the stack is empty.</li></ul><p>Example 1:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">MyStack <span class="built_in">stack</span> = <span class="keyword">new</span> MyStack();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.push(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.push(<span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.top();   <span class="comment">// returns 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.pop();   <span class="comment">// returns 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>.empty(); <span class="comment">// returns false</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>值得注意的地方是在导出来的时候不能用q.size()-1，因为在导的过程中q的size是在变化的。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Queue&lt;Integer&gt; q;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        q = <span class="keyword">new</span> LinkedList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        q.offer(x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        Queue&lt;Integer&gt; aux = <span class="keyword">new</span> LinkedList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> size = q.size();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            aux.offer(q.poll());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = q.poll();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(!aux.isEmpty())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            q.offer(aux.poll());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** Get the top element. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        Queue&lt;Integer&gt; aux = <span class="keyword">new</span> LinkedList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> size = q.size();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">            aux.offer(q.poll());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = q.poll();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        aux.offer(res);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        q = <span class="keyword">new</span> LinkedList&lt;&gt;(aux);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> q.size() == <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 6.67%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 231. Power of Two</title>
      <link href="2020/02/08/Leetcode-231-Power-of-Two/"/>
      <url>2020/02/08/Leetcode-231-Power-of-Two/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemspower-of-two"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemspower-of-two"></a> 【题目链接】 <a href="https://leetcode.com/problems/power-of-two/" target="_blank" rel="noopener">https://leetcode.com/problems/power-of-two/</a></h1><h1 id="题目难度-easy-428"><a class="markdownIt-Anchor" href="#题目难度-easy-428"></a> 【题目难度】 Easy 42.8%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given an integer, write a function to determine if it is a power of two.</p><p>Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Explanation:</span> <span class="number">20</span> <span class="string">=</span> <span class="number">1</span></span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="number">218</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="literal">false</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>判断一个数是否是2的次方，这里唯一要注意的是要把负数考虑一下。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(n &gt; <span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            n = n / <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 7.32%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 671. Second Minimum Node In a Binary Tree</title>
      <link href="2020/02/08/Leetcode-671-Second-Minimum-Node-In-a-Binary-Tree/"/>
      <url>2020/02/08/Leetcode-671-Second-Minimum-Node-In-a-Binary-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemssecond-minimum-node-in-a-binary-tree"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemssecond-minimum-node-in-a-binary-tree"></a> 【题目链接】 <a href="https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/</a></h1><h1 id="题目难度-easy-430"><a class="markdownIt-Anchor" href="#题目难度-easy-430"></a> 【题目难度】 Easy 43.0%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node’s value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.<br />Given such a binary tree, you need to output the second minimum value in the set made of all the nodes’ value in the whole tree.<br />If no such second minimum value exists, output -1 instead.</p><p>Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="string">/</span> <span class="string">\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="number">2</span>   <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">     <span class="string">/</span> <span class="string">\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="number">5</span>   <span class="number">7</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Explanation:</span> <span class="string">The</span> <span class="string">smallest</span> <span class="string">value</span> <span class="string">is</span> <span class="number">2</span><span class="string">,</span> <span class="string">the</span> <span class="string">second</span> <span class="string">smallest</span> <span class="string">value</span> <span class="string">is</span> <span class="number">5</span><span class="string">.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这个题目想要一次通过还是有难度的。因为细节很多，比如当左右子树的根相等时就要递归两边再取最小的那个，但是如果有-1出现，也就是有一边是没有答案的，这时候返回最小的就不对了，需要讨论左右两边是否为-1再进行比较。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findSecondMinimumValue</span><span class="params">(TreeNode root)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> left = findSecondMinimumValue(root.left);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> right = findSecondMinimumValue(root.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.left.val == root.right.val)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(left != -<span class="number">1</span> &amp;&amp; right != -<span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> Math.min(left, right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(left == -<span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> right;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> left;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.left.val == root.val)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> left == -<span class="number">1</span> ? root.right.val : Math.min(left, root.right.val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> right == -<span class="number">1</span> ? root.left.val : Math.min(right, root.left.val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 5.25%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1010. Pairs of Songs With Total Durations Divisible by 60</title>
      <link href="2020/02/08/Leetcode-1010-Pairs-of-Songs-With-Total-Durations-Divisible-by-60/"/>
      <url>2020/02/08/Leetcode-1010-Pairs-of-Songs-With-Total-Durations-Divisible-by-60/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemspairs-of-songs-with-total-durations-divisible-by-60"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemspairs-of-songs-with-total-durations-divisible-by-60"></a> 【题目链接】 <a href="https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/" target="_blank" rel="noopener">https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/</a></h1><h1 id="题目难度-easy-469"><a class="markdownIt-Anchor" href="#题目难度-easy-469"></a> 【题目难度】 Easy 46.9%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>In a list of songs, the i-th song has a duration of time[i] seconds.<br />Return the number of pairs of songs for which their total duration in seconds is divisible by 60.  Formally, we want the number of indices i &lt; j with (time[i] + time[j]) % 60 == 0.<br />Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">30</span>,<span class="number">20</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">40</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: Three pairs have a total duration divisible by <span class="number">60</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">(time[<span class="number">0</span>] = <span class="number">30</span>, time[<span class="number">2</span>] = <span class="number">150</span>): total duration <span class="number">180</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">(time[<span class="number">1</span>] = <span class="number">20</span>, time[<span class="number">3</span>] = <span class="number">100</span>): total duration <span class="number">120</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">(time[<span class="number">1</span>] = <span class="number">20</span>, time[<span class="number">4</span>] = <span class="number">40</span>): total duration <span class="number">60</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目给一个数组表示每一首歌的时长，要求返回有多少个pair歌时长加起来是60的倍数。这个题目和two sum很像，都是找满足条件的pair。所以这里可以用hashmap记录每个数出现的次数，当满足后面某个数的时候将次数加在结果中就行。这里需要特殊处理的是60，因为如果用60-n%60来看需要多少，那结果就是60，但储存的时候是储存n%60是0，这样就找不到了，所以需要把为60的转化成需要0.</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numPairsDivisibleBy60</span><span class="params">(<span class="keyword">int</span>[] time)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time.length; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> need = (<span class="number">60</span> -(time[i] % <span class="number">60</span>)) % <span class="number">60</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map.containsKey(need))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                res += map.get(need);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            map.put(time[i] % <span class="number">60</span>, map.getOrDefault(time[i] % <span class="number">60</span>, <span class="number">0</span>) + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 34.23%<br />Memory: 7.14%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 989. Add to Array-Form of Integer</title>
      <link href="2020/02/07/Leetcode-989-Add-to-Array-Form-of-Integer/"/>
      <url>2020/02/07/Leetcode-989-Add-to-Array-Form-of-Integer/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsadd-to-array-form-of-integer"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsadd-to-array-form-of-integer"></a> 【题目链接】 <a href="https://leetcode.com/problems/add-to-array-form-of-integer/" target="_blank" rel="noopener">https://leetcode.com/problems/add-to-array-form-of-integer/</a></h1><h1 id="题目难度-easy-441"><a class="markdownIt-Anchor" href="#题目难度-easy-441"></a> 【题目难度】 Easy 44.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>For a non-negative integer X, the array-form of X is an array of its digits in left to right order.  For example, if X = 1231, then the array form is [1,2,3,1].<br />Given the array-form A of a non-negative integer X, return the array-form of the integer X+K.</p><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: A = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>], K = <span class="number">806</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: <span class="number">215</span> + <span class="number">806</span> = <span class="number">1021</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目给一个数组代表一个整数，在给一个整数，求这两个整数的和。这道题考的比较细，要同时考虑到carry，A，K不为0才会退出。重点是list的reverse。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">addToArrayForm</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> i = A.length - <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || (carry &gt; <span class="number">0</span> || K &gt; <span class="number">0</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> cur = (i &gt;= <span class="number">0</span> ? A[i] : <span class="number">0</span>) + K % <span class="number">10</span> + carry;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            res.add(cur % <span class="number">10</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            carry = cur / <span class="number">10</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            K = K / <span class="number">10</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            i--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        Collections.reverse(res); <span class="comment">// 重点！！！</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 90.07%<br />Memory: 19.05%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 819. Most Common Word</title>
      <link href="2020/02/07/Leetcode-819-Most-Common-Word/"/>
      <url>2020/02/07/Leetcode-819-Most-Common-Word/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsmost-common-word"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsmost-common-word"></a> 【题目链接】 <a href="https://leetcode.com/problems/most-common-word/" target="_blank" rel="noopener">https://leetcode.com/problems/most-common-word/</a></h1><h1 id="题目难度-easy-437"><a class="markdownIt-Anchor" href="#题目难度-easy-437"></a> 【题目难度】 Easy 43.7%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a paragraph and a list of banned words, return the most frequent word that is not in the list of banned words.  It is guaranteed there is at least one word that isn’t banned, and that the answer is unique.</p><p>Words in the list of banned words are given in lowercase, and free of punctuation.  Words in the paragraph are not case sensitive.  The answer is in lowercase.</p><p>Example 1:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">paragraph</span> = <span class="string">"Bob hit a ball, the hit BALL flew far after it was hit."</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">banned = [<span class="string">"hit"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Output: <span class="string">"ball"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">"hit"</span> occurs <span class="number">3</span> <span class="keyword">times</span>, <span class="keyword">but</span> <span class="keyword">it</span> <span class="keyword">is</span> a banned <span class="built_in">word</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">"ball"</span> occurs twice (<span class="keyword">and</span> no other <span class="built_in">word</span> <span class="keyword">does</span>), so <span class="keyword">it</span> <span class="keyword">is</span> <span class="keyword">the</span> most frequent non-banned <span class="built_in">word</span> <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">paragraph</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">Note <span class="keyword">that</span> <span class="built_in">words</span> <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">paragraph</span> are <span class="keyword">not</span> case sensitive,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">that</span> punctuation <span class="keyword">is</span> ignored (even <span class="keyword">if</span> adjacent <span class="keyword">to</span> <span class="built_in">words</span>, such <span class="keyword">as</span> <span class="string">"ball,"</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">that</span> <span class="string">"hit"</span> <span class="keyword">isn't</span> <span class="keyword">the</span> answer even though <span class="keyword">it</span> occurs more because <span class="keyword">it</span> <span class="keyword">is</span> banned.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这道题就考了一个东西，如何strip string。其他的count string啥的都很直接。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mostCommonWord</span><span class="params">(String paragraph, String[] banned)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        String[] words = paragraph.replaceAll(<span class="string">"[^a-zA-Z ]"</span>, <span class="string">" "</span>).toLowerCase().split(<span class="string">"\\s+"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String s : banned)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            set.add(s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String s : words)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(set.contains(s))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            map.put(s, map.getOrDefault(s, <span class="number">0</span>) + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        String res = words[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String s : map.keySet())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map.get(s) &gt; max)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                max = map.get(s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                res = s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 43.7%<br />Memory: 5.05%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 246. Strobogrammatic Number</title>
      <link href="2020/02/07/Leetcode-246-Strobogrammatic-Number/"/>
      <url>2020/02/07/Leetcode-246-Strobogrammatic-Number/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsstrobogrammatic-number"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsstrobogrammatic-number"></a> 【题目链接】 <a href="https://leetcode.com/problems/strobogrammatic-number/" target="_blank" rel="noopener">https://leetcode.com/problems/strobogrammatic-number/</a></h1><h1 id="题目难度-easy-439"><a class="markdownIt-Anchor" href="#题目难度-easy-439"></a> 【题目难度】 Easy 43.9%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).<br />Write a function to determine if a number is strobogrammatic. The number is represented as a string.</p><p>Example 1:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span>  <span class="string">"69"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">Output:</span> <span class="literal">true</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这个题目要判断给定的string反转180度之后是否不变。所以就先储存那些不变的数，在遍历的时候碰到了不符合条件的就直接返回false，如果符合条件就和镜面对称的位置比较。一开始做这道题的时候我想的是把数字给求出来，最后返回是否相等就行。结果运行时间很差并且会溢出，后来一想只需要比较一半的strng就行。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStrobogrammatic</span><span class="params">(String num)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = num.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        Map&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        map.put(<span class="string">'0'</span>, <span class="string">'0'</span>); map.put(<span class="string">'1'</span>, <span class="string">'1'</span>); map.put(<span class="string">'6'</span>, <span class="string">'9'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        map.put(<span class="string">'9'</span>, <span class="string">'6'</span>); map.put(<span class="string">'8'</span>, <span class="string">'8'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n / <span class="number">2</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!map.containsKey(num.charAt(i)) || map.get(num.charAt(i)) != num.charAt(n - i - <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 8.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1243. Array Transformation</title>
      <link href="2020/02/07/Leetcode-1243-Array-Transformation/"/>
      <url>2020/02/07/Leetcode-1243-Array-Transformation/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsarray-transformation"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsarray-transformation"></a> 【题目链接】 <a href="https://leetcode.com/problems/array-transformation/" target="_blank" rel="noopener">https://leetcode.com/problems/array-transformation/</a></h1><h1 id="题目难度-easy-525"><a class="markdownIt-Anchor" href="#题目难度-easy-525"></a> 【题目难度】 Easy 52.5%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given an initial array arr, every day you produce a new array using the array of the previous day.<br />On the i-th day, you do the following operations on the array of day i-1 to produce the array of day i:</p><ul><li>If an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.</li><li>If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.</li><li>The first and last elements never change.<br />After some days, the array does not change. Return that final array.</li></ul><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: arr = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">On the first day, the <span class="built_in">array</span> <span class="keyword">is</span> changed <span class="keyword">from</span> [<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>] to [<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">On the second day, the <span class="built_in">array</span> <span class="keyword">is</span> changed <span class="keyword">from</span> [<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] to [<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>].</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">No more operations can be done to <span class="keyword">this</span> <span class="built_in">array</span>.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这个题目就是认真按照题目的描述写code就行，一天一天变化，记录是否又变化，没有变化了就结束了。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">transformArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] b = arr.clone();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(flag)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            flag = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[i-<span class="number">1</span>] &amp;&amp; arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                    flag = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                    b[i] = arr[i] - <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(arr[i] &lt; arr[i-<span class="number">1</span>] &amp;&amp; arr[i] &lt; arr[i+<span class="number">1</span>])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                    flag = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                    b[i] = arr[i] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                    b[i] = arr[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            arr = b.clone();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : arr)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            res.add(n);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 95.24%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 448. Find All Numbers Disappeared in an Array</title>
      <link href="2020/02/06/Leetcode-448-Find-All-Numbers-Disappeared-in-an-Array/"/>
      <url>2020/02/06/Leetcode-448-Find-All-Numbers-Disappeared-in-an-Array/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsfind-all-numbers-disappeared-in-an-array"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsfind-all-numbers-disappeared-in-an-array"></a> 【题目链接】 <a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/</a></h1><h1 id="题目难度-easy-550"><a class="markdownIt-Anchor" href="#题目难度-easy-550"></a> 【题目难度】 Easy 55.0%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.<br />Find all the elements of [1, n] inclusive that do not appear in this array.<br />Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.<br />Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Output:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>,<span class="number">6</span>]</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目给定一个数组，这个数组应该包含从1到n的整数（n是这个数组的长度）。但是有些元素重复了导致另外一些消失了，现在要把消失的元素都找出来。要求用O(n) time O(1) space。<br />像这种数组的值限制在长度里面，并且要求线性的时间和常数的空间，一般都是要把值当index用去标记哪些出现过。然后再统计那些没有被标记的位置得到消失的元素。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            nums[Math.abs(nums[i]) - <span class="number">1</span>] = -Math.abs(nums[Math.abs(nums[i]) - <span class="number">1</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                res.add(i+<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 90.63%<br />Memory: 73.58%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 953. Verifying an Alien Dictionary</title>
      <link href="2020/02/06/Leetcode-953-Verifying-an-Alien-Dictionary/"/>
      <url>2020/02/06/Leetcode-953-Verifying-an-Alien-Dictionary/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsverifying-an-alien-dictionary"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsverifying-an-alien-dictionary"></a> 【题目链接】 <a href="https://leetcode.com/problems/verifying-an-alien-dictionary/" target="_blank" rel="noopener">https://leetcode.com/problems/verifying-an-alien-dictionary/</a></h1><h1 id="题目难度-easy-551"><a class="markdownIt-Anchor" href="#题目难度-easy-551"></a> 【题目难度】 Easy 55.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>In an alien language, surprisingly they also use english lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.<br />Given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographicaly in this alien language.<br />Example 1:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">Input</span>: words = ["word","world","row"], <span class="keyword">order</span> = "worldabcefghijkmnpqstuvxyz"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="keyword">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: <span class="keyword">As</span> <span class="string">'d'</span> comes <span class="keyword">after</span> <span class="string">'l'</span> <span class="keyword">in</span> this <span class="keyword">language</span>, <span class="keyword">then</span> words[<span class="number">0</span>] &gt; words[<span class="number">1</span>], hence the <span class="keyword">sequence</span> <span class="keyword">is</span> unsorted.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目说，假如外星人也用小写英文，但是顺序和我们不一样。给我们一些词和字母顺序，要我们判断这些词是否符合这个顺序的词典顺序。所以我们需要先把顺序处理一下，形成O(1)的访问，因为在比较词的时候会大量访问这个顺序。然后就只需要从左到右逐个比较这些词是否符合顺序。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlienSorted</span><span class="params">(String[] words, String order)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> ind = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; order.length(); i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            index[order.charAt(i) - <span class="string">'a'</span>] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length - <span class="number">1</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(!compare(words[i], words[i+<span class="number">1</span>], index))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(String s1, String s2, <span class="keyword">int</span>[] index)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(; i &lt; Math.min(s1.length(), s2.length()); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> a = index[s1.charAt(i) - <span class="string">'a'</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> b = index[s2.charAt(i) - <span class="string">'a'</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(a &lt; b)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a &gt; b)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> i == s1.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 15.38%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1170. Compare Strings by Frequency of the Smallest Character</title>
      <link href="2020/02/06/Leetcode-1170-Compare-Strings-by-Frequency-of-the-Smallest-Character/"/>
      <url>2020/02/06/Leetcode-1170-Compare-Strings-by-Frequency-of-the-Smallest-Character/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemscompare-strings-by-frequency-of-the-smallest-character"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemscompare-strings-by-frequency-of-the-smallest-character"></a> 【题目链接】 <a href="https://leetcode.com/problems/compare-strings-by-frequency-of-the-smallest-character/" target="_blank" rel="noopener">https://leetcode.com/problems/compare-strings-by-frequency-of-the-smallest-character/</a></h1><h1 id="题目难度-easy-582"><a class="markdownIt-Anchor" href="#题目难度-easy-582"></a> 【题目难度】 Easy 58.2%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Let’s define a function f(s) over a non-empty string s, which calculates the frequency of the smallest character in s. For example, if s = “dcce” then f(s) = 2 because the smallest character is “c” and its frequency is 2.<br />Now, given string arrays queries and words, return an integer array answer, where each answer[i] is the number of words such that f(queries[i]) &lt; f(W), where W is a word in words.<br />Example 1:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">Input</span>: queries = [<span class="string">"bbb"</span>,<span class="string">"cc"</span>], words = [<span class="string">"a"</span>,<span class="string">"aa"</span>,<span class="string">"aaa"</span>,<span class="string">"aaaa"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [1,2]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: <span class="keyword">On</span> the first <span class="keyword">query</span> only <span class="built_in">f</span>(<span class="string">"bbb"</span>) &lt; <span class="built_in">f</span>(<span class="string">"aaaa"</span>). <span class="keyword">On</span> the second <span class="keyword">query</span> both <span class="built_in">f</span>(<span class="string">"aaa"</span>) and <span class="built_in">f</span>(<span class="string">"aaaa"</span>) are both &gt; <span class="built_in">f</span>(<span class="string">"cc"</span>).</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目评分很低。因为考的实质内容不多，多的是繁琐的count操作。首先要有一个function去实现题目中的f，实现了之后就是逐个比较的过程了。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] numSmallerByFrequency(String[] q, String[] w) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[q.length];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String s : w)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            count[helper(s)]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q.length; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> tmp = helper(q[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = tmp + <span class="number">1</span>; j &lt; <span class="number">11</span>; j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                res[i] += count[j];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(String s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">char</span> min_c = s.charAt(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> min = map.get(min_c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : map.keySet())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(c &lt; min_c)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                min_c = c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                min = map.get(c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> min;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 47.28%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 696. Count Binary Substrings</title>
      <link href="2020/02/06/Leetcode-696-Count-Binary-Substrings/"/>
      <url>2020/02/06/Leetcode-696-Count-Binary-Substrings/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemscount-binary-substrings"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemscount-binary-substrings"></a> 【题目链接】 <a href="https://leetcode.com/problems/count-binary-substrings/" target="_blank" rel="noopener">https://leetcode.com/problems/count-binary-substrings/</a></h1><h1 id="题目难度-easy-549"><a class="markdownIt-Anchor" href="#题目难度-easy-549"></a> 【题目难度】 Easy 54.9%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Give a string s, count the number of non-empty (contiguous) substrings that have the same number of 0’s and 1’s, and all the 0’s and all the 1’s in these substrings are grouped consecutively.<br />Substrings that occur multiple times are counted the number of times they occur.<br />Example 1:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Inpu<span class="variable">t:</span> <span class="string">"00110011"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Outpu<span class="variable">t:</span> <span class="number">6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: There are <span class="number">6</span> substrings that have equal <span class="keyword">number</span> of consecutive <span class="number">1</span><span class="string">'s and 0'</span><span class="variable">s:</span> <span class="string">"0011"</span>, <span class="string">"01"</span>, <span class="string">"1100"</span>, <span class="string">"10"</span>, <span class="string">"0011"</span>, <span class="built_in">and</span> <span class="string">"01"</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Notice that some of these substrings <span class="built_in">repeat</span> <span class="built_in">and</span> are counted the <span class="keyword">number</span> of times they occur.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Also, <span class="string">"00110011"</span> <span class="keyword">is</span> not <span class="keyword">a</span> valid substring because <span class="keyword">all</span> the <span class="number">0</span><span class="string">'s (and 1'</span>s) are not grouped together.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目给定一个字符串s，要求找出子串的个数，子串的要求是0和1的个数相等，并且所有的0在一半，1在一半。所以0011这样的就有2个结果。其实这道题和有多少回文子串很像，都是从中间开始判断比较容易，因为中间满足条件才需要往两边去检查。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countBinarySubstrings</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = s.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">char</span>[] c = s.toCharArray();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> left = <span class="number">0</span>; left &lt; n - <span class="number">1</span>; left++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> right = left + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(c[left] != c[right])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                res++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">int</span> i = left - <span class="number">1</span>, j = right + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n &amp;&amp; c[i] == c[i+<span class="number">1</span>] &amp;&amp; c[j] == c[j-<span class="number">1</span>])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                    res++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                    i--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                    j++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 98.79%<br />Memory: 6.25%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1103. Distribute Candies to People</title>
      <link href="2020/02/05/Leetcode-1103-Distribute-Candies-to-People/"/>
      <url>2020/02/05/Leetcode-1103-Distribute-Candies-to-People/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsdistribute-candies-to-people"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsdistribute-candies-to-people"></a> 【题目链接】 <a href="https://leetcode.com/problems/distribute-candies-to-people/" target="_blank" rel="noopener">https://leetcode.com/problems/distribute-candies-to-people/</a></h1><h1 id="题目难度-easy-602"><a class="markdownIt-Anchor" href="#题目难度-easy-602"></a> 【题目难度】 Easy 60.2%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>We distribute some number of candies, to a row of n = num_people people in the following way:<br />We then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person.<br />Then, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person.<br />This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift).<br />Return an array (of length num_people and sum candies) that represents the final distribution of candies.<br />Example 1:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: candies = 7, num_people = 4</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [1,2,3,1]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">On the first turn, ans[0] += 1,<span class="built_in"> and </span>the<span class="built_in"> array </span>is [1,0,0,0].</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">On the second turn, ans[1] += 2,<span class="built_in"> and </span>the<span class="built_in"> array </span>is [1,2,0,0].</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">On the third turn, ans[2] += 3,<span class="built_in"> and </span>the<span class="built_in"> array </span>is [1,2,3,0].</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">On the fourth turn, ans[3] += 1 (because there is only one candy left),<span class="built_in"> and </span>the<span class="keyword"> final</span><span class="built_in"> array </span>is [1,2,3,1].</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>按照递增分糖果。每往后挪一下就增加一个，所以要记住前一个是多少。然后每一次都判断当前糖果是否足够，如果不足够就全部给。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] distributeCandies(<span class="keyword">int</span> candies, <span class="keyword">int</span> num_people) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[num_people];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        candies -= <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> pre = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(candies &gt; <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> cur_ind = i % num_people;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> need = pre + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(candies &lt; need)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                res[cur_ind] += candies;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                candies = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                res[cur_ind] += need;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                candies -= need;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            pre = need;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            i++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 91.74%<br />Memory: 100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1260. Shift 2D Grid</title>
      <link href="2020/02/05/Leetcode-1260-Shift-2D-Grid/"/>
      <url>2020/02/05/Leetcode-1260-Shift-2D-Grid/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsshift-2d-grid"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsshift-2d-grid"></a> 【题目链接】 <a href="https://leetcode.com/problems/shift-2d-grid/" target="_blank" rel="noopener">https://leetcode.com/problems/shift-2d-grid/</a></h1><h1 id="题目难度-easy-604"><a class="markdownIt-Anchor" href="#题目难度-easy-604"></a> 【题目难度】 Easy 60.4%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.<br />In one shift operation:</p><ul><li>Element at grid[i][j] moves to grid[i][j + 1].</li><li>Element at grid[i][n - 1] moves to grid[i + 1][0].</li><li>Element at grid[m - 1][n - 1] moves to grid[0][0].<br />Return the 2D grid after applying shift operation k times.<br />Example 1:</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: grid = [[<span class="number">3</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>],[<span class="number">19</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">10</span>],[<span class="number">12</span>,<span class="number">0</span>,<span class="number">21</span>,<span class="number">13</span>]], k = <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [[<span class="number">12</span>,<span class="number">0</span>,<span class="number">21</span>,<span class="number">13</span>],[<span class="number">3</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>],[<span class="number">19</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">10</span>]]</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这道题一拿到手真想不出来有啥高效的办法。其实把给定的2d matrix转成1d array，再看那些shift就简单很多了。比如[[1,2,3], [4,5,6]] Shift两次变成[[5,6,1],[2,3,4]]，其实就是个一维数组把后面的k个element放到前面来，你说是不是？</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; shiftGrid(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> k) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> m = grid.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        k = k % (m * n); <span class="comment">// 因为shift m*n 次就还原了</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[m * n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                arr[idx++] = grid[i][j];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m * n - k; i &lt; m * n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            list.add(arr[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(list.size() == n)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                list = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m * n - k; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            list.add(arr[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(list.size() == n)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                list = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime:  96.51%<br />Memory:  100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> grid </tag>
            
            <tag> 2d to 1d trick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1331. Rank Transform of an Array</title>
      <link href="2020/02/05/Leetcode-1331-Rank-Transform-of-an-Array/"/>
      <url>2020/02/05/Leetcode-1331-Rank-Transform-of-an-Array/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsrank-transform-of-an-array"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsrank-transform-of-an-array"></a> 【题目链接】 <a href="https://leetcode.com/problems/rank-transform-of-an-array/" target="_blank" rel="noopener">https://leetcode.com/problems/rank-transform-of-an-array/</a></h1><h1 id="题目难度-easy-601"><a class="markdownIt-Anchor" href="#题目难度-easy-601"></a> 【题目难度】 Easy 60.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given an array of integers arr, replace each element with its rank.<br />The rank represents how large the element is. The rank has the following rules:</p><ul><li>Rank is an integer starting from 1.</li><li>The larger the element, the larger the rank. If two elements are equal, their rank must be the same.</li><li>Rank should be as small as possible.</li></ul><p>Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: arr = [<span class="number">40</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: <span class="number">40</span> <span class="keyword">is</span> the largest element. <span class="number">10</span> <span class="keyword">is</span> the smallest. <span class="number">20</span> <span class="keyword">is</span> the second smallest. <span class="number">30</span> <span class="keyword">is</span> the third smallest.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目要求把array的值换成rank，如果是相等的值那么rank也相等。读完这个题目，我有一个疑问就是，[1,1,2]和[1,1,3]这两个rank哪个是对的。如果是在面试中碰到这个题我就要问一下面试官，在leetcode里我就是自己创建一个testcase去看结果。结果证明第一个是对的。那么我的步骤是先复制一下array再排序，这里涉及rank就肯定需要sort，然后用hashmap去记录排好序的数组的rank，再往回去对应rank。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] arrayRankTransform(<span class="keyword">int</span>[] arr) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = arr.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] b = arr.clone();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        Arrays.sort(b);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> rank = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                map.put(b[i], rank);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            rank = b[i] == b[i-<span class="number">1</span>] ? rank : rank + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            map.put(b[i], rank);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            arr[i] = map.get(arr[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> arr;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime:  95.47%<br />Memory:  100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 758. Bold Words in String</title>
      <link href="2020/02/04/Leetcode-758-Bold-Words-in-String/"/>
      <url>2020/02/04/Leetcode-758-Bold-Words-in-String/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsbold-words-in-string"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsbold-words-in-string"></a> 【题目链接】 <a href="https://leetcode.com/problems/bold-words-in-string/" target="_blank" rel="noopener">https://leetcode.com/problems/bold-words-in-string/</a></h1><h1 id="题目难度-easy-441"><a class="markdownIt-Anchor" href="#题目难度-easy-441"></a> 【题目难度】 Easy 44.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a set of keywords words and a string S, make all appearances of all keywords in S bold. Any letters between <b> and </b> tags become bold.<br />The returned string should use the least number of tags possible, and of course the tags should form a valid combination.<br />For example, given that <code>words = [&quot;ab&quot;, &quot;bc&quot;]</code> and <code>S = &quot;aabcd&quot;</code>, we should return <code>&quot;a&lt;b&gt;abc&lt;/b&gt;d&quot;</code>. Note that returning <code>&quot;a&lt;b&gt;a&lt;b&gt;b&lt;/b&gt;c&lt;/b&gt;d&quot;</code> would use more tags, so it is incorrect.</p><p>Note:</p><p>words has length in range [0, 50].<br />words[i] has length in range [1, 10].<br />S has length in range [0, 500].<br />All characters in words[i] and S are lowercase letters.</p><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目给定一些word，和一个长string s，要求在s中找到这些word，并且用最少的<code>&lt;b&gt;...&lt;/b&gt;</code>来标记，因为word中出现的词有可能会连起来。如果我们能知道所有需要标记的坐标就很容易完成标记了。那么如何知道这些坐标呢？可以用string的indexOf来找是否有这些word，这里有一个难点就是all appearances，所以在找坐标的时候就得重复找，直到返回值是-1.</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">boldWords</span><span class="params">(String[] words, String S)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> N = S.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">boolean</span>[] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(String s : words)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> ind = S.indexOf(s, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">while</span>(ind &gt; -<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = ind; i &lt; ind + s.length(); i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                    flag[i] = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                ind = S.indexOf(s, ind + <span class="number">1</span>); <span class="comment">// 重复往后找直到返回-1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; N; h++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(flag[h] &amp;&amp; (h == <span class="number">0</span> || !flag[h-<span class="number">1</span>]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                sb.append(<span class="string">"&lt;b&gt;"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            sb.append(S.charAt(h));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(flag[h] &amp;&amp; (h == N-<span class="number">1</span> || !flag[h+<span class="number">1</span>]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                sb.append(<span class="string">"&lt;/b&gt;"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> sb.toString();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime:  88.10%<br />Memory:  100.00%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 594. Longest Harmonious Subsequence</title>
      <link href="2020/02/04/Leetcode-594-Longest-Harmonious-Subsequence/"/>
      <url>2020/02/04/Leetcode-594-Longest-Harmonious-Subsequence/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemslongest-harmonious-subsequence"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemslongest-harmonious-subsequence"></a> 【题目链接】 <a href="https://leetcode.com/problems/longest-harmonious-subsequence/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-harmonious-subsequence/</a></h1><h1 id="题目难度-easy-452"><a class="markdownIt-Anchor" href="#题目难度-easy-452"></a> 【题目难度】 Easy 45.2%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>We define a harmounious array as an array where the difference between its maximum value and its minimum value is exactly 1.<br />Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible subsequences.<br />Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: The longest harmonious subsequence <span class="keyword">is</span> [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>].</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目要求找出最长的harmounious序列的长度，harmounious序列就是最大值与最小值之差是1。所以该题与顺序无关，与出现的次数有关，那么用hashmap统计每个数字的次数。然后要求之差为1，那么就看每个数字n是否有n-1，如果没有就是0，如果有就是两者相加，再与res相比较得到最后的最大值。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLHS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : nums)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            map.put(n, map.getOrDefault(n, <span class="number">0</span>) + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : map.keySet())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> cur = map.get(n);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map.containsKey(n - <span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                cur += map.get(n - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                cur = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            res = Math.max(res, cur);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 89.16%<br />Memory: 31.58%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 401. Binary Watch</title>
      <link href="2020/02/04/Leetcode-401-Binary-Watch/"/>
      <url>2020/02/04/Leetcode-401-Binary-Watch/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsbinary-watch"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsbinary-watch"></a> 【题目链接】 <a href="https://leetcode.com/problems/binary-watch/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-watch/</a></h1><h1 id="题目难度-easy-463"><a class="markdownIt-Anchor" href="#题目难度-easy-463"></a> 【题目难度】 Easy 46.3%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).<br />Each LED represents a zero or one, with the least significant bit on the right.<br />Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p><p>Example 1:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Input:</span> n = <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Return:</span> [<span class="string">"1:00"</span>, <span class="string">"2:00"</span>, <span class="string">"4:00"</span>, <span class="string">"8:00"</span>, <span class="string">"0:01"</span>, <span class="string">"0:02"</span>, <span class="string">"0:04"</span>, <span class="string">"0:08"</span>, <span class="string">"0:16"</span>, <span class="string">"0:32"</span>]</span></pre></td></tr></table></figure><p>Note:</p><ul><li>The order of output does not matter.</li><li>The hour must not contain a leading zero, for example “01:00” is not valid, it should be “1:00”.</li><li>The minute must be consist of two digits and may contain a leading zero, for example “10:2” is not valid, it should be “10:02”.</li></ul><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这道题是个高频题。并且我认为它的难度应该在medium。读完题就能感受到是个排列组合问题，1bit放在哪个位置的问题。 这里有几个难点：</p><ol><li>有hour和minute两个集合，所以首先一个loop是分多少个1在hour，剩下的在minute；</li><li>分好了1的个数之后，就开始排列组合形成二进制数，这里很容易想到是dfs遍历所有情况。一开始我还考虑到了hour是4位，minute是6位。后来发现其实可以先不用管，在最后合并的时候判断一下数值大小就行了。</li></ol><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">readBinaryWatch</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] hours = &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] mins = &#123;<span class="number">32</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Math.min(<span class="number">4</span>, num); i++)&#123; <span class="comment">// 有i个1在hour</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            List&lt;Integer&gt; hour = helper(hours, i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            List&lt;Integer&gt; min = helper(mins, num - i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(Integer h : hour)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(h &gt; <span class="number">11</span>) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span>(Integer m : min)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span>(m &gt; <span class="number">59</span>) <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                    res.add(String.valueOf(h) + (m &lt; <span class="number">10</span> ? <span class="string">":0"</span> : <span class="string">":"</span>) + String.valueOf(m));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> n)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        dfs(input, <span class="number">0</span>, n, <span class="number">0</span>, res);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> start, <span class="keyword">int</span> n, <span class="keyword">int</span> out, List&lt;Integer&gt; res)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123; <span class="comment">// 没有1了</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            res.add(out);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; input.length; i++)&#123; <span class="comment">//这里不是很好理解，需要记一下</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            dfs(input, i + <span class="number">1</span>, n - <span class="number">1</span>, out + input[i], res);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime:  48.76%<br />Memory:  33.33%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 551. Student Attendance Record I</title>
      <link href="2020/02/04/Leetcode-551-Student-Attendance-Record-I/"/>
      <url>2020/02/04/Leetcode-551-Student-Attendance-Record-I/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsstudent-attendance-record-i"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsstudent-attendance-record-i"></a> 【题目链接】 <a href="https://leetcode.com/problems/student-attendance-record-i/" target="_blank" rel="noopener">https://leetcode.com/problems/student-attendance-record-i/</a></h1><h1 id="题目难度-easy-464"><a class="markdownIt-Anchor" href="#题目难度-easy-464"></a> 【题目难度】 Easy 46.4%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>You are given a string representing an attendance record for a student. The record only contains the following three characters:<br />‘A’ : Absent.<br />‘L’ : Late.<br />‘P’ : Present.<br />A student could be rewarded if his attendance record doesn’t contain more than one ‘A’ (absent) or more than two continuous ‘L’ (late).<br />You need to return whether the student could be rewarded according to his attendance record.<br />Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">"PPALLP"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="literal">True</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目的意思是，如果这个学生缺勤超过1次或者连续迟到超过2次就没有奖励。这道题的评分不太好，因为是一道不太具有考察能力的题目。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkRecord</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> countA = <span class="number">0</span>, countL = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(c == <span class="string">'L'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                countL++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                countL = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(c == <span class="string">'A'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                    countA++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(countA &gt; <span class="number">1</span> || countL &gt; <span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100.00%<br />Memory: 5.26%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 572. Subtree of Another Tree</title>
      <link href="2020/02/03/Leetcode-572-Subtree-of-Another-Tree/"/>
      <url>2020/02/03/Leetcode-572-Subtree-of-Another-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemssubtree-of-another-tree"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemssubtree-of-another-tree"></a> 【题目链接】 <a href="https://leetcode.com/problems/subtree-of-another-tree/" target="_blank" rel="noopener">https://leetcode.com/problems/subtree-of-another-tree/</a></h1><h1 id="题目难度-easy-437"><a class="markdownIt-Anchor" href="#题目难度-easy-437"></a> 【题目难度】 Easy 43.7%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node’s descendants. The tree s could also be considered as a subtree of itself.<br />Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Given tree s:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">     <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">/</span> <span class="string">\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   <span class="number">4</span>   <span class="number">5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="string">/</span> <span class="string">\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>   <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Given tree t:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">   <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="string">/</span> <span class="string">\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>   <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="string">Return</span> <span class="literal">true</span><span class="string">,</span> <span class="string">because</span> <span class="string">t</span> <span class="string">has</span> <span class="string">the</span> <span class="string">same</span> <span class="string">structure</span> <span class="string">and</span> <span class="string">node</span> <span class="string">values</span> <span class="string">with</span> <span class="string">a</span> <span class="string">subtree</span> <span class="string">of</span> <span class="string">s.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>t题目要求判断t是否是s的子树，子树就是s的一个树枝摘下来要完全等于t。那么就分别判断，如果root相等，那这两个树就要完全相等才行。否则就在s的左右子树中找。反正就是两种情况，包含root和不包含root。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> check(s, t) || isSubtree(s.left, t) || isSubtree(s.right, t);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(TreeNode s, TreeNode t)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || t == <span class="keyword">null</span> || s.val != t.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> check(s.left, t.left) &amp;&amp; check(s.right, t.right);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime:  96.80%<br />Memory:  97.78%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> BFS </tag>
            
            <tag> Grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 191. Number of 1 Bits</title>
      <link href="2020/02/03/Leetcode-191-Number-of-1-Bits/"/>
      <url>2020/02/03/Leetcode-191-Number-of-1-Bits/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsnumber-of-1-bits"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsnumber-of-1-bits"></a> 【题目链接】 <a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">https://leetcode.com/problems/number-of-1-bits/</a></h1><h1 id="题目难度-easy-466"><a class="markdownIt-Anchor" href="#题目难度-easy-466"></a> 【题目难度】 Easy 46.6%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Write a function that takes an unsigned integer and return the number of ‘1’ bits it has (also known as the Hamming weight).</p><p>Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="number">00000000000000000000000000001011</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Explanation:</span> <span class="string">The</span> <span class="string">input</span> <span class="string">binary</span> <span class="string">string</span> <span class="number">00000000000000000000000000001011</span> <span class="string">has</span> <span class="string">a</span> <span class="string">total</span> <span class="string">of</span> <span class="string">three</span> <span class="string">'1'</span> <span class="string">bits.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目的意思是，给一个整数，要count有多少个bit是1，把这个整数当作无符号整数。那么就用一个mask，每一位的去看是否为一。如果为1，那么&amp;之后就不会是0，但注意也不一定是1。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> mask = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>((n &amp; mask) != <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                res++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            mask = mask &lt;&lt; <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100%<br />Memory: 5.41%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Bit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 994. Rotting Oranges</title>
      <link href="2020/02/03/Leetcode-994-Rotting-Oranges/"/>
      <url>2020/02/03/Leetcode-994-Rotting-Oranges/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsrotting-oranges"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsrotting-oranges"></a> 【题目链接】 <a href="https://leetcode.com/problems/rotting-oranges/" target="_blank" rel="noopener">https://leetcode.com/problems/rotting-oranges/</a></h1><h1 id="题目难度-easy-470"><a class="markdownIt-Anchor" href="#题目难度-easy-470"></a> 【题目难度】 Easy 47.0%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>In a given grid, each cell can have one of three values:</p><ul><li>the value 0 representing an empty cell;</li><li>the value 1 representing a fresh orange;</li><li>the value 2 representing a rotten orange.</li></ul><p>Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.<br />Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.<br />Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [[<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">4</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这是一道很有意思的题。坏了的橘子会把周围好的橘子也弄坏，然后慢慢传播开来。题目给定一个矩阵，然后问多少回合能将所有橘子都传染坏。如果不能就返回-1。这道题读下来就感觉比一般easy的题要难一点。这里的一回合，意思是所有为2的点都开始传播，这里就应该要想到BFS了，也就是tree的level traversal。level traversal就是用queue去储存一个level的点，然后遍历这个queue，做好标记，将新来的点加到后面，一直到queue为空。<br />在遍历的过程中，我们需要做的事情有：</p><ol><li>对于每一个点都要看看四周是否有坏橘子；</li><li>将新的点加入queue并且标记2；</li><li>随时记录为1的点，因为最后还要判断是否所有橘子都坏了；</li><li>这里有一点是需要记住并且练习的，就是对每一个点检查上下左右四周的操作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] steps = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] step : steps)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = pos[<span class="number">0</span>] + step[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> y = pos[<span class="number">1</span>] + step[<span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;= n || y &gt;= m || ...) <span class="comment">// not qualify</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">... <span class="comment">// if qualify</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><ol start="5"><li>用一个queue去做level traversal是需要记录queue的size的。</li></ol><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">orangesRotting</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = grid.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> m = grid[<span class="number">0</span>].length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        Queue&lt;<span class="keyword">int</span>[]&gt; q = <span class="keyword">new</span> LinkedList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> freshcount = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                    q.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    freshcount++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(freshcount == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[][] steps = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            count++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> size = q.size();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">int</span>[] pos = q.poll();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span>[] step : steps)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">int</span> x = pos[<span class="number">0</span>] + step[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">int</span> y = pos[<span class="number">1</span>] + step[<span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;= n || y &gt;= m || grid[x][y] == <span class="number">2</span> || grid[x][y] == <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                    grid[x][y] = <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                    q.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x, y&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                    freshcount--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> freshcount == <span class="number">0</span> ? count - <span class="number">1</span> : -<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 31.05%<br />Memory: 81.25%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1018. Binary Prefix Divisible By 5</title>
      <link href="2020/02/03/Leetcode-1018-Binary-Prefix-Divisible-By-5/"/>
      <url>2020/02/03/Leetcode-1018-Binary-Prefix-Divisible-By-5/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsbinary-prefix-divisible-by-5"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsbinary-prefix-divisible-by-5"></a> 【题目链接】 <a href="https://leetcode.com/problems/binary-prefix-divisible-by-5/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-prefix-divisible-by-5/</a></h1><h1 id="题目难度-easy-470"><a class="markdownIt-Anchor" href="#题目难度-easy-470"></a> 【题目难度】 Easy 47.0%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given an array A of 0s and 1s, consider N_i: the i-th subarray from A[0] to A[i] interpreted as a binary number (from most-significant-bit to least-significant-bit.)<br />Return a list of booleans answer, where answer[i] is true if and only if N_i is divisible by 5.<br />Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">The input numbers <span class="keyword">in</span> binary are <span class="number">0</span>, <span class="number">01</span>, <span class="number">011</span>; which are <span class="number">0</span>, <span class="number">1</span>, <span class="keyword">and</span> <span class="number">3</span> <span class="keyword">in</span> base<span class="number">-10.</span>  Only the first number <span class="keyword">is</span> divisible by <span class="number">5</span>, so answer[<span class="number">0</span>] <span class="keyword">is</span> <span class="literal">true</span>.</span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: [<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">false</span>]</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目的意思很简单，就是给定一个数组，里面只有0和1，看看从左到右形成的所有二进制的数能否被5整除。<br />那么就是每添加一个右边的数，就相当于当前的数向左移一位再加上右边这个数。再判断一下是否被5整除。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Boolean&gt; <span class="title">prefixesDivBy5</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        List&lt;Boolean&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> curr = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : A)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            curr = <span class="number">2</span>*curr+i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            curr %= <span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            res.add(curr == <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 86.29%<br />Memory: 9.09%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 541. Reverse String II</title>
      <link href="2020/02/03/Leetcode-541-Reverse-String-II/"/>
      <url>2020/02/03/Leetcode-541-Reverse-String-II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsreverse-string-ii"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsreverse-string-ii"></a> 【题目链接】 <a href="https://leetcode.com/problems/reverse-string-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-string-ii/</a></h1><h1 id="题目难度-easy-471"><a class="markdownIt-Anchor" href="#题目难度-easy-471"></a> 【题目难度】 Easy 47.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.</p><p>Example 1:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Input:</span> s = <span class="string">"abcdefg"</span>, k = <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Output:</span> <span class="string">"bacdfeg"</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这个题目的意思是给定一个字符串s和一个整数k，把s中每2k长度的子串反转前k个字符。如果最后剩下的不足k个就全部反转，否组还是反转前k个。<br />这个题目收到的赞是341，踩是997，说明这道题不是一个很好考验算法的题目。我的答案是按照最简单的逻辑写的，比官方答案繁琐，但是更直接。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseStr</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = s.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(i + <span class="number">2</span> * k &lt; n)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            StringBuilder tmp = <span class="keyword">new</span> StringBuilder(s.substring(i, i + k));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            sb.append(tmp.reverse());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            sb.append(s.substring(i + k, i + <span class="number">2</span> * k));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            i += <span class="number">2</span> * k;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(i &gt; n - k)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            StringBuilder tmp = <span class="keyword">new</span> StringBuilder(s.substring(i));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            sb.append(tmp.reverse());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            StringBuilder tmp = <span class="keyword">new</span> StringBuilder(s.substring(i, i + k));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            sb.append(tmp.reverse());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            sb.append(s.substring(i + k));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> sb.toString();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 77.19%<br />Memory: 7.41%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 299. Bulls and Cows</title>
      <link href="2020/01/27/Leetcode-299-Bulls-and-Cows/"/>
      <url>2020/01/27/Leetcode-299-Bulls-and-Cows/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsbulls-and-cows"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsbulls-and-cows"></a> 【题目链接】 <a href="https://leetcode.com/problems/bulls-and-cows/" target="_blank" rel="noopener">https://leetcode.com/problems/bulls-and-cows/</a></h1><h1 id="题目难度-easy-413"><a class="markdownIt-Anchor" href="#题目难度-easy-413"></a> 【题目难度】 Easy 41.3%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.<br />Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows.<br />Please note that both secret number and friend’s guess may contain duplicate digits.<br />Example 1:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input:<span class="built_in"> secret </span>= <span class="string">"1123"</span>, guess = <span class="string">"0111"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Output: <span class="string">"1A1B"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Explanation: The 1st 1 <span class="keyword">in</span> friend<span class="string">'s guess is a bull, the 2nd or 3rd 1 is a cow.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>其实就是count每个字符的频率。如果对应着出现的，就直接增加A，否则就记录下来。然后再比较count。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] s = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] g = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> A = <span class="number">0</span>, B = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; secret.length(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> s_int = secret.charAt(i) - <span class="string">'0'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> g_int = guess.charAt(i) - <span class="string">'0'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(s_int == g_int)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                A++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                s[s_int]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                g[g_int]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            B += Math.min(s[i], g[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> String.valueOf(A) + <span class="string">"A"</span> + String.valueOf(B) + <span class="string">"B"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 51.43%<br />Memory: 55.26%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 849. Maximize Distance to Closest Person</title>
      <link href="2020/01/27/Leetcode-849-Maximize-Distance-to-Closest-Person/"/>
      <url>2020/01/27/Leetcode-849-Maximize-Distance-to-Closest-Person/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsmaximize-distance-to-closest-person"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsmaximize-distance-to-closest-person"></a> 【题目链接】 <a href="https://leetcode.com/problems/maximize-distance-to-closest-person/" target="_blank" rel="noopener">https://leetcode.com/problems/maximize-distance-to-closest-person/</a></h1><h1 id="题目难度-easy-421"><a class="markdownIt-Anchor" href="#题目难度-easy-421"></a> 【题目难度】 Easy 42.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>In a row of seats, 1 represents a person sitting in that seat, and 0 represents that the seat is empty.<br />There is at least one empty seat, and at least one person sitting.<br />Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized.<br />Return that maximum distance to closest person.<br />Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">If Alex sits <span class="keyword">in</span> the second open seat (seats[<span class="number">2</span>]), then the closest person has distance <span class="number">2.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">If Alex sits <span class="keyword">in</span> any other open seat, the closest person has distance <span class="number">1.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">Thus, the maximum distance to the closest person <span class="keyword">is</span> <span class="number">2.</span></span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">If Alex sits <span class="keyword">in</span> the last seat, the closest person <span class="keyword">is</span> <span class="number">3</span> seats away.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> the maximum distance possible, so the answer <span class="keyword">is</span> <span class="number">3.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>给一排座位，要找一个离别人最远的座位。挺有趣的题目，和现实也挺符合。很容易想到的是用两个数组from_left和from_right，from_left[i]表示位置i到左边有人的距离为几，from_right[i]表示位置i到右边有人的距离为几。然后两个数组的对应位置的最小值就是该位置到有人位置的距离。这里难点是这两个数组的初始值应该怎么设置。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDistToClosest</span><span class="params">(<span class="keyword">int</span>[] seats)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = seats.length;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> max_dist = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] from_left = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] from_right = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        Arrays.fill(from_left, n);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        Arrays.fill(from_right, n);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(seats[i] == <span class="number">1</span>) from_left[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i &gt; <span class="number">0</span>) from_left[i] = from_left[i-<span class="number">1</span>] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(seats[i] == <span class="number">1</span>) from_right[i] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i &lt; n-<span class="number">1</span>) from_right[i] = from_right[i+<span class="number">1</span>] + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> dist = Math.min(from_left[i], from_right[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            max_dist = Math.max(dist, max_dist);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> max_dist;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 92.77%<br />Memory: 8.3%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 437. Path Sum III</title>
      <link href="2020/01/27/Leetcode-437-Path-Sum-III/"/>
      <url>2020/01/27/Leetcode-437-Path-Sum-III/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemspath-sum-iii"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemspath-sum-iii"></a> 【题目链接】 <a href="https://leetcode.com/problems/path-sum-iii/" target="_blank" rel="noopener">https://leetcode.com/problems/path-sum-iii/</a></h1><h1 id="题目难度-easy-446"><a class="markdownIt-Anchor" href="#题目难度-easy-446"></a> 【题目难度】 Easy 44.6%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>You are given a binary tree in which each node contains an integer value.<br />Find the number of paths that sum to a given value.<br />The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).<br />The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.<br />Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">root = [<span class="number">10</span>,<span class="number">5</span>,<span class="number">-3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="literal">null</span>,<span class="number">1</span>], sum = <span class="number">8</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">      <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">     /  \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="number">5</span>   <span class="number">-3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   / \    \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="number">3</span>   <span class="number">2</span>   <span class="number">11</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"> / \   \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>  <span class="number">-2</span>   <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">Return <span class="number">3.</span> The paths that sum to <span class="number">8</span> are:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  <span class="number">5</span> -&gt; <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>  <span class="number">5</span> -&gt; <span class="number">2</span> -&gt; <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span> <span class="number">-3</span> -&gt; <span class="number">11</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目给出一个二叉树和一个整数。找出有多少条path和为给定得整数。path不一定要从root开始或者以leaf结束。这里其实就是难点所在。不以leaf结尾不用怎么管，因为是结尾，所以判断剩下的数等于当前节点值就可以判断。关键在于不一定以root开始，所以我们就要分情况了，最后结果应该是 1）以root开始；+ 2）不以root开始。不以root开始更简单，那就是左右子树的子问题相加。以root开始呢，那就要往左右子树一直延续下去，遇到root.val==sum就要加一。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> has_root = helper(root, sum);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> no_root = pathSum(root.left, sum) + pathSum(root.right, sum);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> has_root + no_root;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(root.val == sum) res = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        res += helper(root.left, sum - root.val) + helper(root.right, sum - root.val);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 11.01% （可能有大量的重复计算，以后再优化，现在的版本最好理解）<br />Memory: 90.91%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 697. Degree of an Array</title>
      <link href="2019/12/24/Leetcode-697-Degree-of-an-Array/"/>
      <url>2019/12/24/Leetcode-697-Degree-of-an-Array/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsdegree-of-an-array"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsdegree-of-an-array"></a> 【题目链接】 <a href="https://leetcode.com/problems/degree-of-an-array/" target="_blank" rel="noopener">https://leetcode.com/problems/degree-of-an-array/</a></h1><h1 id="题目难度-easy-523"><a class="markdownIt-Anchor" href="#题目难度-easy-523"></a> 【题目难度】 Easy: 52.3%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.<br />Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.<br />Example 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">The input <span class="built_in">array</span> has a degree of <span class="number">2</span> because both elements <span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span> appear twice.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">Of the subarrays that have the same degree:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">2</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">The shortest length <span class="keyword">is</span> <span class="number">2.</span> So <span class="keyword">return</span> <span class="number">2.</span></span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">6</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>按照题目的要求，要知道所有元素出现的次数，再找出出现次数最多的元素的起点与终点差，如果有多个，返回最小差的那个。要count元素很容易想到int[]和HashMap，但是这里除了count，还要知道开始和结束的坐标，所以就用HashMap&lt;Integer, List<Integer>&gt;对每个元素记录所有出现的坐标，count就是list的size。因为记录的时候是按照顺序来的，所以最后找开始和终点坐标也很简单，就是list.get(size-1)和list.get(0)。对于size一样的，就取最小的。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findShortestSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            List&lt;Integer&gt; list;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map.containsKey(nums[i]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                list = map.get(nums[i]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                list = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            list.add(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            map.put(nums[i], list);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> distance = Integer.MAX_VALUE;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> freq = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : map.keySet())&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            List&lt;Integer&gt; list = map.get(n);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> size = list.size();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(size &gt; freq)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                freq = size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                distance = list.get(size-<span class="number">1</span>) - list.get(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(size == freq)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                distance = Math.min(distance, list.get(size-<span class="number">1</span>) - list.get(<span class="number">0</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> distance + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 78.37%<br />Memory: 16.67%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1029. Two City Scheduling</title>
      <link href="2019/12/23/Leetcode-1029-Two-City-Scheduling/"/>
      <url>2019/12/23/Leetcode-1029-Two-City-Scheduling/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemstwo-city-scheduling"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemstwo-city-scheduling"></a> 【题目链接】<a href="https://leetcode.com/problems/two-city-scheduling/" target="_blank" rel="noopener">https://leetcode.com/problems/two-city-scheduling/</a></h1><h1 id="题目难度easy-553"><a class="markdownIt-Anchor" href="#题目难度easy-553"></a> 【题目难度】Easy: 55.3%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].<br />Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.<br />Example:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: [[<span class="number">10</span>,<span class="number">20</span>],[<span class="number">30</span>,<span class="number">200</span>],[<span class="number">400</span>,<span class="number">50</span>],[<span class="number">30</span>,<span class="number">20</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">110</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">The first person goes to city A <span class="keyword">for</span> a cost of <span class="number">10.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">The second person goes to city A <span class="keyword">for</span> a cost of <span class="number">30.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">The third person goes to city B <span class="keyword">for</span> a cost of <span class="number">50.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">The fourth person goes to city B <span class="keyword">for</span> a cost of <span class="number">20.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">The total minimum cost <span class="keyword">is</span> <span class="number">10</span> + <span class="number">30</span> + <span class="number">50</span> + <span class="number">20</span> = <span class="number">110</span> to have half the people <span class="built_in">int</span>erviewing <span class="keyword">in</span> each city.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这个题目一拿到手就觉得是动态规划的题，因为题目要求最小cost，一般这种都是动态规划。但是想了很久都没想出来，无奈之下看了答案，结果是greedy。题目关键点就是每个人都必须被派到A或者B，所以对每个人就有一个cost差，比如：例子中的第一个人去A不去B的cost应该是10-20=-10，意思为公司省10块。那么，我们把每个人都计算一下差值再排一下序，把前一半送去A，后一半送去B。这里也正式学习写comparator的好时机。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">twoCitySchedCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        Arrays.sort(costs, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>] - o1[<span class="number">1</span>] - (o2[<span class="number">0</span>] - o2[<span class="number">1</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = costs.length / <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            total += costs[i][<span class="number">0</span>] + costs[i+n][<span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> total;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 98.63%<br />Memory: 22.22%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-必备小知识点（持续更新）</title>
      <link href="2019/12/23/Leetcode-RelatedThings/"/>
      <url>2019/12/23/Leetcode-RelatedThings/</url>
      
        <content type="html"><![CDATA[<p>刷题的时候有一些小的知识点很有用也很快捷，但感觉很多也很杂。所以在这篇文章中持续更新总结刷题过程中所遇到的。</p><a id="more"></a><h1 id="string-stringbuilder"><a class="markdownIt-Anchor" href="#string-stringbuilder"></a> String / StringBuilder</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>String start with</td><td><code>str.startsWith(String prefix, int toffset);</code></td></tr><tr><td>2</td><td>String split</td><td><code>str.split(&quot;\\s+&quot;); str.split(&quot;\\.&quot;);</code></td></tr><tr><td>3</td><td>String trim</td><td><code>str.trim();</code></td></tr><tr><td>4</td><td>Equal String</td><td><code>str1.equals(str2);</code></td></tr><tr><td>5</td><td>String replace</td><td><code>str.replace(&quot;&quot;, &quot;&quot;);</code></td></tr><tr><td>6</td><td>StringBuilder</td><td><code>sb.append(str); sb.toString(); sb.reverse();</code></td></tr><tr><td>7</td><td>Check char is letter</td><td><code>Character.isLetter(c);</code></td></tr><tr><td>8</td><td>Find substring index</td><td><code>str.indexOf(s, start_pos);</code></td></tr><tr><td>9</td><td>toLowerCase / toUpperCase</td><td><code>s.toLowerCase(); s.toUpperCase();</code></td></tr><tr><td>10</td><td>strip punctuation and split</td><td><code>s.replaceAll(&quot;[^a-zA-Z ]&quot;, &quot; &quot;).toLowerCase().split(&quot;\\s+&quot;);</code></td></tr><tr><td>11</td><td>StringBuilder delete char</td><td><code>sb.deleteCharAt(i);</code></td></tr><tr><td>12</td><td>String Compare</td><td><code>s1.compareTo(s2) &lt; 0; //check if s1 &lt; s2 lexicographically</code></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>Reverse</td><td><code>Collections.reverse(list);</code></td></tr><tr><td>2</td><td>Equals</td><td><code>list1.equals(list2);</code></td></tr><tr><td>3</td><td>Remove last element</td><td><code>list.remove(list.size() - 1);</code></td></tr><tr><td>4</td><td>Add as first element</td><td><code>list.add(0, n);</code></td></tr><tr><td>5</td><td>Set element</td><td><code>list.set(2, n);</code></td></tr><tr><td>6</td><td>Map value list to nested list</td><td><code>new ArrayList(map.values());</code></td></tr></tbody></table><h1 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> Queue</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>Insert</td><td><code>offer(e);</code></td></tr><tr><td>2</td><td>Remove</td><td><code>poll();</code></td></tr><tr><td>3</td><td>Get peek</td><td><code>peek();</code></td></tr><tr><td>4</td><td>Initial</td><td><code>Queue&lt;String&gt; q = new LinkedList();</code></td></tr><tr><td>5</td><td>Size</td><td><code>q.size(); // 如果用一个queue做level traversal，记得用int size = q.size();先记录size</code></td></tr><tr><td>6</td><td>Empty</td><td><code>q.empty();</code></td></tr><tr><td>7</td><td>clone</td><td><code>new LinkedList&lt;&gt;(myQueue);</code></td></tr></tbody></table><h1 id="arraydeque"><a class="markdownIt-Anchor" href="#arraydeque"></a> ArrayDeque</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>Insert from head</td><td><code>offerFirst(e);</code></td></tr><tr><td>2</td><td>Removal from head</td><td><code>pollFirst();</code></td></tr><tr><td>3</td><td>Retrieval from head</td><td><code>peekFirst();</code></td></tr><tr><td>4</td><td>Insert from tail</td><td><code>offerLast(e);</code></td></tr><tr><td>5</td><td>Removal from tail</td><td><code>pollLast();</code></td></tr><tr><td>6</td><td>Retrieval from tail</td><td><code>peekLast();</code></td></tr><tr><td>7</td><td>Initialize</td><td><code>Deque&lt;String&gt; q = new ArrayDeque();</code></td></tr></tbody></table><h1 id="priorityqueue"><a class="markdownIt-Anchor" href="#priorityqueue"></a> PriorityQueue</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>Initialize</td><td><code>PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;Integer&gt;();</code></td></tr><tr><td>2</td><td>Default Comparator</td><td>是小根堆</td></tr><tr><td>3</td><td>MaxHeap Comparator</td><td>```new PriorityQueue<Integer>((n1, n2)-&gt;n2 - n1);</td></tr><tr><td>4</td><td>External Comparator</td><td><code>new PriorityQueue&lt;&gt;((x, y)-&gt;map.get(y) - map.get(x));</code></td></tr><tr><td>5</td><td>ListNode Comparator</td><td><code>new PriorityQueue&lt;&gt;((n1, n2)-&gt;n1.val - n2.val);</code></td></tr></tbody></table><h1 id="stack"><a class="markdownIt-Anchor" href="#stack"></a> Stack</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>Insert</td><td><code>push(e);</code></td></tr><tr><td>2</td><td>Remove</td><td><code>pop();</code></td></tr><tr><td>3</td><td>Get peek</td><td><code>peek();</code></td></tr><tr><td>4</td><td>Initial</td><td><code>Stack&lt;String&gt; s = new Stack();</code></td></tr><tr><td>5</td><td>Size</td><td><code>s.size();</code></td></tr><tr><td>6</td><td>Empty</td><td><code>s.empty();</code></td></tr></tbody></table><h1 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>Update</td><td><code>map.put(a, map.getOrDefault(a, 0) + 1);</code></td></tr><tr><td>2</td><td>Max value</td><td><code>Collections.max(map.values());</code></td></tr><tr><td>3</td><td>Map&lt;Integer, List<Integer>&gt; map</td><td><code>map.get(n).add(b);</code></td></tr></tbody></table><h1 id="set"><a class="markdownIt-Anchor" href="#set"></a> Set</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>Initialize Set</td><td><code>Set&lt;String&gt; set = new HashSet&lt;&gt;(Arrays.asList(&quot;a&quot;, &quot;b&quot;));</code></td></tr><tr><td>2</td><td>remove</td><td><code>set.remove(n);</code></td></tr></tbody></table><h1 id="array"><a class="markdownIt-Anchor" href="#array"></a> Array</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>一维Sort</td><td><code>Arrays.sort(a);</code></td></tr><tr><td>2</td><td>[n][2] pair sort, 先比第一个，再比第二个</td><td><code>Arrays.sort(res, (n1, n2)-&gt;n1[0] == n2[0] ? n1[1] - n2[1] : n1[0] - n2[0]);</code></td></tr><tr><td>3</td><td>数组复制</td><td><code>b = arr.clone();</code></td></tr></tbody></table><h1 id="number"><a class="markdownIt-Anchor" href="#number"></a> Number</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>取整</td><td><code>(int)Math.ceil(a); (int)Math.floor(a);</code></td></tr><tr><td>2</td><td>ASCII</td><td>总128个。A(65)-Z(90), a(97)-z(122).</td></tr><tr><td>3</td><td>异或</td><td><code>1^1=0; 1^0=1; 0^1=1; 0^0=0;</code></td></tr><tr><td>4</td><td>左移</td><td><code>n &lt;&lt; 1; //乘以2</code></td></tr><tr><td>5</td><td>右移</td><td><code>n &gt;&gt; 1; //除以2</code></td></tr><tr><td>6</td><td>无符号右移</td><td><code>n &gt;&gt;&gt; 1; //除以2，忽略符号位，空位以0补齐</code></td></tr><tr><td>7</td><td>二进制中1的个数</td><td><code>Integer.bitCount(n);</code></td></tr><tr><td>8</td><td>移位和加法</td><td><code>cur = (cur &lt;&lt; 1) + root.val; // 括号不能省</code></td></tr></tbody></table><h1 id="convertion"><a class="markdownIt-Anchor" href="#convertion"></a> Convertion</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>String to Integer</td><td><code>Integer.parseInt(str);</code></td></tr><tr><td>2</td><td>Integer to String</td><td><code>String.valueOf(n);</code></td></tr><tr><td>3</td><td>Integer to Double</td><td><code>Double.valueOf(n);</code> or <code>a*1.0;</code></td></tr><tr><td>4</td><td>Queue to List</td><td><code>List list = new ArrayList(q); // 与q顺序一样</code></td></tr><tr><td>5</td><td>Stack to List</td><td><code>List list = new ArrayList(s); // 与s顺序相反</code></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="miscellaneous"><a class="markdownIt-Anchor" href="#miscellaneous"></a> Miscellaneous</h1><table><thead><tr><th>序号</th><th>功能</th><th>代码</th></tr></thead><tbody><tr><td>1</td><td>是否为2的次方</td><td><code>(n &gt; 0) &amp;&amp; ((n &amp; (n - 1)) == 0);</code></td></tr><tr><td>2</td><td>是否为4的次方</td><td><code>(n &gt; 0) &amp;&amp; ((n &amp; (n - 1)) == 0) &amp;&amp; (n % 3 == 1);</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 5. Longest Palindromic Substring</title>
      <link href="2019/12/11/Leetcode-5-Longest-Palindromic-Substring/"/>
      <url>2019/12/11/Leetcode-5-Longest-Palindromic-Substring/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemslongest-palindromic-substring"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemslongest-palindromic-substring"></a> 【题目链接】 <a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-palindromic-substring/</a></h1><h1 id="题目难度-medium-284"><a class="markdownIt-Anchor" href="#题目难度-medium-284"></a> 【题目难度】 Medium 28.4%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.<br />Example 1:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">Input</span>: "babad"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: "bab"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Note: "aba" <span class="keyword">is</span> <span class="keyword">also</span> a <span class="keyword">valid</span> answer.</span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Input:</span> <span class="string">"cbbd"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Output:</span> <span class="string">"bb"</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = s.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">char</span>[] ca = s.toCharArray();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            dp[i][i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        String res = <span class="string">""</span> + ca[<span class="number">0</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res_l = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - k; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">int</span> j = i + k;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(ca[i] != ca[j])&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                    dp[i][j] = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span>(j - i == <span class="number">1</span> || dp[i+<span class="number">1</span>][j-<span class="number">1</span>] == <span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                        dp[i][j] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">if</span>(j - i + <span class="number">1</span> &gt; res_l)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                            res_l = j - i + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                            res = s.substring(i, j + <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 19.78%<br />Memory: 5.24%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 131. Palindrome Partitioning</title>
      <link href="2019/12/11/Leetcode-131-Palindrome-Partitioning/"/>
      <url>2019/12/11/Leetcode-131-Palindrome-Partitioning/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemspalindrome-partitioning"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemspalindrome-partitioning"></a> 【题目链接】 <a href="https://leetcode.com/problems/palindrome-partitioning/" target="_blank" rel="noopener">https://leetcode.com/problems/palindrome-partitioning/</a></h1><h1 id="题目难度-medium-437"><a class="markdownIt-Anchor" href="#题目难度-medium-437"></a> 【题目难度】 Medium 43.7%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a string s, partition s such that every substring of the partition is a palindrome.<br />Return all possible palindrome partitioning of s.<br />Example 1:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Input</span>: <span class="string">"aab"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Output</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">[</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  [<span class="string">"aa"</span>,<span class="string">"b"</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  [<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目要求返回partition的所有可能性，每一个partition都要把给定string分成全部都是回文的子串。这种要求列举所有可能性的，一般是dfs。画出tree就好写code了。这里先mark一下，等到写dfs系列的时候再来写解析。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        dfs(s, res, <span class="keyword">new</span> ArrayList&lt;String&gt;());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String s, List&lt;List&lt;String&gt;&gt; res, List&lt;String&gt; list)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(s.length() == <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(list));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(valid(s, <span class="number">0</span>, i-<span class="number">1</span>))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                list.add(s.substring(<span class="number">0</span>, i));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                dfs(s.substring(i), res, list);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                list.remove(list.size() - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(String s, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(s.charAt(l) != s.charAt(r))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            l++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            r--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 95.53%<br />Memory: 95.45%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 516. Longest Palindromic Subsequence</title>
      <link href="2019/12/11/Leetcode-516-Longest-Palindromic-Subsequence/"/>
      <url>2019/12/11/Leetcode-516-Longest-Palindromic-Subsequence/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemslongest-palindromic-subsequence"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemslongest-palindromic-subsequence"></a> 【题目链接】 <a href="https://leetcode.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-palindromic-subsequence/</a></h1><h1 id="题目难度-medium-495"><a class="markdownIt-Anchor" href="#题目难度-medium-495"></a> 【题目难度】 Medium 49.5%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a string s, find the longest palindromic subsequence’s length in s. You may assume that the maximum length of s is 1000.<br />Example 1:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Inpu<span class="variable">t:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">"bbbab"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Outpu<span class="variable">t:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">One possible longest palindromic subsequence <span class="keyword">is</span> <span class="string">"bbbb"</span>.</span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Inpu<span class="variable">t:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">"cbbd"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Outpu<span class="variable">t:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">One possible longest palindromic subsequence <span class="keyword">is</span> <span class="string">"bb"</span>.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目问最长的回文子序列有多长。像这种“最”+子串问题，一般都是用动态规划。这里先mark一下，等写动态规划里系列的时候再回来写。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = s.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            dp[i][i] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; n; k++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - k; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">int</span> j = i + k;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                dp[i][j] = Math.max(dp[i+<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(s.charAt(i) == s.charAt(j))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[i+<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">2</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 21.89%<br />Memory: 5.55%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 125. Valid Palindrome</title>
      <link href="2019/12/11/Leetcode-125-Valid-Palindrome/"/>
      <url>2019/12/11/Leetcode-125-Valid-Palindrome/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsvalid-palindrome"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsvalid-palindrome"></a> 【题目链接】 <a href="https://leetcode.com/problems/valid-palindrome/" target="_blank" rel="noopener">https://leetcode.com/problems/valid-palindrome/</a></h1><h1 id="题目难度-easy-332"><a class="markdownIt-Anchor" href="#题目难度-easy-332"></a> 【题目难度】 Easy 33.2%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p><p>Note: For the purpose of this problem, we define empty string as valid palindrome.<br />Example 1:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span> <span class="string">"A man, a plan, a canal: Panama"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">Output:</span> <span class="literal">true</span></span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span> <span class="string">"race a car"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">Output:</span> <span class="literal">false</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>这道题就很无聊了，从2000多个踩也能看出来。因为这道题并没有考到什么有用的知识点，只是考判断字符是否是字母或者数字而已。这种题一般不会出现在面试中，因为面试是要让面试官在短短的一道或者两道题中，对你的算法能力有个基本的判断。而这道题并不能达到这个效果却又占一道题的坑，对面试官来说也不是件好事情。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">char</span>[] ca = s.toCharArray();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = s.length() - <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; !valid(ca[l])) l++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; !valid(ca[r])) r--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(l &lt; r &amp;&amp; Character.toLowerCase(ca[l]) != Character.toLowerCase(ca[r]))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            l++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            r--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span> || c &gt;= <span class="string">'A'</span> &amp;&amp; c &lt;= <span class="string">'Z'</span> || c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 96.51%<br />Memory: 100%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 680. Valid Palindrome II</title>
      <link href="2019/12/11/Leetcode-680-Valid-Palindrome-II/"/>
      <url>2019/12/11/Leetcode-680-Valid-Palindrome-II/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsvalid-palindrome-ii"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsvalid-palindrome-ii"></a> 【题目链接】 <a href="https://leetcode.com/problems/valid-palindrome-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/valid-palindrome-ii/</a></h1><h1 id="题目难度-easy-354"><a class="markdownIt-Anchor" href="#题目难度-easy-354"></a> 【题目难度】 Easy 35.4%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.<br />Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">"aba"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="literal">True</span></span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">Input</span>: "abca"</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="keyword">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: You could <span class="keyword">delete</span> the <span class="type">character</span> <span class="string">'c'</span>.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>给一个string，允许最多删除一个字符，问能否形成回文串。当面试碰到这样的题目的时候，一定要先问一下“能否形成回文串是可以打乱顺序还是不可以？”。因为两种情况的解法不一样，如果可以打乱顺序，那就是count每个字符的个数；如果不可以打乱，就是判断左半边和右半边是否一样。这里是不允许打乱顺序（问我怎么看出来的？我以为可以打乱顺序写完后提交没通过发现的，手动微笑脸）。所以我们用左右指针l和r来比较字符，如果不相同，就判断[l+1, r]和[l, r-1]。任何一个是回文串就返回true。这里需要一个最基本的判断回文串的函数。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validPalindrome</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = s.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">char</span>[] ca = s.toCharArray();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(ca[l] != ca[r])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> valid(ca, l + <span class="number">1</span>, r) || valid(ca, l, r - <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            l++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            r--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">char</span>[] ca, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(ca[l] != ca[r])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            l++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            r--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 99.48%<br />Memory: 97.22%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 206. Reverse Linked List</title>
      <link href="2019/12/09/Leetcode-206-Reverse-Linked-List/"/>
      <url>2019/12/09/Leetcode-206-Reverse-Linked-List/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsreverse-linked-list"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsreverse-linked-list"></a> 【题目链接】 <a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-linked-list/</a></h1><h1 id="题目难度-easy-583"><a class="markdownIt-Anchor" href="#题目难度-easy-583"></a> 【题目难度】 Easy 58.3%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Reverse a singly linked list.<br />Example :</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;NULL</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">5</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span>-&gt;NULL</span></pre></td></tr></table></figure><p>Follow up:<br />A linked list can be reversed either iteratively or recursively. Could you implement both?</p><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>将链表翻转，难点在于对于每一个点都只知道下一个。所以在处理的过程中，在改变next指针的仔细一点就没有问题。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><h2 id="a-iteratively"><a class="markdownIt-Anchor" href="#a-iteratively"></a> a. Iteratively</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        ListNode cur = head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            dummy.next = cur.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            cur.next = dummy.next.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            dummy.next.next = head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            head = dummy.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>【通过效率】<br />Runtime: 100%<br />Memory: 98.56%</p><h2 id="b-recursively"><a class="markdownIt-Anchor" href="#b-recursively"></a> b. Recursively</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        ListNode prev = reverseList(head.next);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        head.next.next = head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        head.next = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> prev;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>【通过效率】<br />Runtime: 100%<br />Memory: 98.20%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 234. Palindrome Linked List</title>
      <link href="2019/12/09/Leetcode-234-Palindrome-Linked-List/"/>
      <url>2019/12/09/Leetcode-234-Palindrome-Linked-List/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemspalindrome-linked-list"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemspalindrome-linked-list"></a> 【题目链接】 <a href="https://leetcode.com/problems/palindrome-linked-list/" target="_blank" rel="noopener">https://leetcode.com/problems/palindrome-linked-list/</a></h1><h1 id="题目难度-easy-374"><a class="markdownIt-Anchor" href="#题目难度-easy-374"></a> 【题目难度】 Easy 37.4%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a singly linked list, determine if it is a palindrome.<br />Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="number">1</span><span class="string">-&gt;2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="literal">false</span></span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">2</span>-&gt;<span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="literal">true</span></span></pre></td></tr></table></figure><p>Follow up:<br />Could you do it in O(n) time and O(1) space?</p><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>和<a href="https://leetcode.com/problems/palindrome-number" target="_blank" rel="noopener">9. Palindrome Number</a>同出一辙。那题是判断一个整数是不是回文，需要反转数字的后半段。这里判断一个linked list是不是回文，那就反转list的后半段。Follow up里要求用常数空间，反转list的后半段就符合要求。所以这里考的知识点就是找list的中间点和list的反转。找中间点就是快慢指针，当停下来的时候，慢指针指的是后半段的开头，所以需要一个dummy指针的帮助来翻转list，因为不确定head是哪一个。这个dummy可以是慢指针的前一个也可以是随便一个。反转指针也是一项必定掌握的技能，有疑问的小伙伴可以先看看<a href="https://pearmonkey.com/2019/12/09/Leetcode-206-Reverse-Linked-List/">206. Reverse Linked List</a>.</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//快慢指针找中间点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        ListNode slow = head, fast = head, pre = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            pre = slow;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            slow = slow.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            fast = fast.next.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//翻转后半段</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        ListNode new_head = slow;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(slow.next != <span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            pre.next = slow.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            slow.next = pre.next.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            pre.next.next = new_head;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            new_head = pre.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//和前半段进行比较</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        pre.next = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span> &amp;&amp; new_head != <span class="keyword">null</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(head.val != new_head.val)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            head = head.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            new_head = new_head.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 99.48%<br />Memory: 98.78%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 9. Palindrome Number</title>
      <link href="2019/12/09/Leetcode-9-Palindrome-Number/"/>
      <url>2019/12/09/Leetcode-9-Palindrome-Number/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemspalindrome-number"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemspalindrome-number"></a> 【题目链接】 <a href="https://leetcode.com/problems/palindrome-number/" target="_blank" rel="noopener">https://leetcode.com/problems/palindrome-number/</a></h1><h1 id="题目难度-easy-458"><a class="markdownIt-Anchor" href="#题目难度-easy-458"></a> 【题目难度】 Easy 45.8%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.<br />Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="number">121</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="literal">true</span></span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: <span class="number">-121</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation: From left <span class="built_in">to</span> <span class="literal">right</span>, <span class="keyword">it</span> reads <span class="number">-121.</span> From <span class="literal">right</span> <span class="built_in">to</span> left, <span class="keyword">it</span> becomes <span class="number">121</span>-. Therefore <span class="keyword">it</span> is <span class="keyword">not</span> <span class="keyword">a</span> palindrome.</span></pre></td></tr></table></figure><p>Example 3</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Explanation:</span> <span class="string">Reads</span> <span class="number">01</span> <span class="string">from</span> <span class="string">right</span> <span class="string">to</span> <span class="string">left.</span> <span class="string">Therefore</span> <span class="string">it</span> <span class="string">is</span> <span class="string">not</span> <span class="string">a</span> <span class="string">palindrome.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目要判断一个给定得数字是否是个回文串，但不能直接把int转为string再判断，如果可以的话，那就没什么意思了。既然要判断是否是回文串，那就是左半边和右半边是镜面对称，但是这里是数字，如何找到左半边和右半边呢？首先，负数或者10，20这样的整数是不可能的。剩下的可以让x每次减少最低位，同时用一个变量revert记录这个数，并且x每缩小十倍，revert就放大十倍，最开始x肯定大于revert，当revert大于或者等于x的时候就可以停下来了，因为接着往下走x只能更小，revert只能更大。跳出循环之后，再比较x是否等于revert或者revert/10.</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> revert = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(x &gt; revert)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            revert = revert * <span class="number">10</span> + x % <span class="number">10</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            x = x / <span class="number">10</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> x == revert || x == revert / <span class="number">10</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 73.57%<br />Memory: 5.02%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 409. Longest Palindrome</title>
      <link href="2019/12/08/Leetcode-409-Longest-Palindrome/"/>
      <url>2019/12/08/Leetcode-409-Longest-Palindrome/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接httpsleetcodecomproblemslongest-palindrome"><a class="markdownIt-Anchor" href="#题目链接httpsleetcodecomproblemslongest-palindrome"></a> 【题目链接】<a href="https://leetcode.com/problems/longest-palindrome/" target="_blank" rel="noopener">https://leetcode.com/problems/longest-palindrome/</a></h1><h1 id="题目难度easy-491"><a class="markdownIt-Anchor" href="#题目难度easy-491"></a> 【题目难度】Easy 49.1%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.<br />This is case sensitive, for example “Aa” is not considered a palindrome here.<br />Note:<br />Assume the length of given string will not exceed 1,010.<br />Example:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">"abccccdd"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Output:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">One longest palindrome <span class="keyword">that</span> can be built <span class="keyword">is</span> <span class="string">"dccaccd"</span>, <span class="keyword">whose</span> <span class="built_in">length</span> <span class="keyword">is</span> <span class="number">7.</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目的目的是，由给定的string的字符，能组成的回文串最长是多长。关键点如下：</p><ol><li>这里是问回文串的长度，那么就需要count字符数。</li><li>回文串的可能性：偶回文和奇回文。</li><li>字符串中只包含大写或小写字符。</li><li>字符串长度不会超过1010.</li></ol><p>在开始写code之前，要把整个过程先过一遍，这是一个需要养成的好习惯，因为很有可能自己的第一直觉想法是错误的，如果还没在脑子里过一遍就开始写，等到真的碰到问题了时间就浪费了一大半了。所以，写code应该是最后完成的事情才对，在面试过程中，先将自己的想法提出来与面试官沟通，不仅会大大加分，还有可能在和面试官讨论的过程中发现自己的错误。<br />以这道题为例，题目问最长能组成的回文串是多长。回文由奇和偶，如果由奇数的字符，那肯定奇回文会更长。所以步骤为：</p><ol><li>count每个字符。</li><li>遍历每个count，若出现奇数记录下来。</li><li>对于每一个出现的字符，一定可以用个数是最大的偶数。</li><li>最后结果之前记录的奇数来返回结果。</li></ol><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            count[(<span class="keyword">int</span>)c]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : count)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">//取最大的偶数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            res += (n / <span class="number">2</span>) * <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                flag = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> flag ? res + <span class="number">1</span> : res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100%<br />Memory: 100%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 266. Palindrome Permutation</title>
      <link href="2019/12/07/Leetcode-266-PalindromePermutation/"/>
      <url>2019/12/07/Leetcode-266-PalindromePermutation/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemspalindrome-permutation"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemspalindrome-permutation"></a> 【题目链接】 <a href="https://leetcode.com/problems/palindrome-permutation/" target="_blank" rel="noopener">https://leetcode.com/problems/palindrome-permutation/</a></h1><h1 id="题目难度-easy-608"><a class="markdownIt-Anchor" href="#题目难度-easy-608"></a> 【题目难度】 Easy 60.8%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a string, determine if a permutation of the string could form a palindrome.<br />Example 1:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span> <span class="string">"code"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">Output:</span> <span class="literal">false</span></span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span> <span class="string">"aab"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">Output:</span> <span class="literal">true</span></span></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span> <span class="string">"carerac"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">Output:</span> <span class="literal">true</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目很简短也很明确。是需要判断给定的string是否能经过重新排列形成一个回文。所以就count每一个字符的个数就行。有了count之后检查每一个count并记录奇数count，若出现了两次奇数则直接返回false。如果一直没有出现两次奇数则返回true。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPermutePalindrome</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//因为不确定是否只有字母，所以假设s可能包含任何ASCII字符</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">//既然考虑到了所有ASCII字符，就可以直接将char强转为int</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            count[(<span class="keyword">int</span>)c]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">boolean</span> odd_flag = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : count)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">//如果之前已经出现过奇数字符，现在又出现了，就直接返回false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; odd_flag == <span class="keyword">true</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">//上面没有返回false说明目前有可能还没有出现奇数字符</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                odd_flag = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 100%<br />Memory: 100%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 回文串 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 647. Palindromic Substring</title>
      <link href="2019/12/05/Leetcode-647-PalindromicSubstring/"/>
      <url>2019/12/05/Leetcode-647-PalindromicSubstring/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemspalindromic-substrings"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemspalindromic-substrings"></a> 【题目链接】 <a href="https://leetcode.com/problems/palindromic-substrings/" target="_blank" rel="noopener">https://leetcode.com/problems/palindromic-substrings/</a></h1><h1 id="题目难度-medium-585"><a class="markdownIt-Anchor" href="#题目难度-medium-585"></a> 【题目难度】 Medium 58.5%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a string, your task is to count how many palindromic substrings in this string.<br />The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.<br />Example 1:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span> <span class="string">"abc"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">Output:</span> <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">Explanation:</span> Three palindromic <span class="string">strings:</span> <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>.</span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">Input:</span> <span class="string">"aaa"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">Output:</span> <span class="number">6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">Explanation:</span> Six palindromic <span class="string">strings:</span> <span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"aa"</span>, <span class="string">"aa"</span>, <span class="string">"aaa"</span>.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目要求给定字符串的所有为回文串的子串。从最简单的开始，不管字符串是什么，每一个字符一定是它的子串，并且也是回文串，例如“abc”中的“a”，“b”，“c”，然后，我们要找是否有更长的子串为回文串。最直接的想法是，从第一个元素（i = 0 : len - 1, O(n)）开始作为子串的开始端，然后以i以及之后的位置作为结束端（j = i : len - 1, O(n)）,这样形成的每一个子串都送去判断一下（O(n)），若为回文，则加入结果集中。这样做的时间复杂度是O(n^3)。我们选择仔细想一想，这个过程中有没有重复的地方，其实所谓的算法的改进，就是将那些重复做的地方识别出来然后剔除，以降低时间复杂度。在刚刚的问题中，如果我们的字符串为“abcba”，当i = 0, j = 4, 子串“abcba”被检查为回文（这一检查的时间复杂度是O(n)）, 这里也就意味着里面的“bcb”和“c”也都是回文。所以，当后面i = 1, j = 3时，我们再次判断“bcb”是否为回文的这一操作就是重复的了。所以，如果从两端开始往中间判断的办法会有重复的，那我们就从中间往两边判断。也就是让每一个字符都当一回 回文串 的中间字符（奇数回文）和中间偏左的字符（偶数回文），时间复杂度为O(2n)，然后向两边延伸判断，时间复杂度为O(n)。整体复杂度为O(2 * n^2)。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        res = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            helper(s, i, i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            helper(s, i, i+<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(String s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &lt; s.length() &amp;&amp; s.charAt(i) == s.charAt(j))&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            res++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            i--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            j++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="通过效率"><a class="markdownIt-Anchor" href="#通过效率"></a> 【通过效率】</h1><p>Runtime: 99.97%<br />Memory: 100%</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT | 如何给文章轮廓添加阴影</title>
      <link href="2019/12/03/hexo-add-shadow/"/>
      <url>2019/12/03/hexo-add-shadow/</url>
      
        <content type="html"><![CDATA[<ol><li>编辑<code>themes/next/source/css/_custom/custom.styl</code>文件；</li><li>在这个文件添加如下配置：</li></ol><a id="more"></a><h2 id="-0-3-重新hexo-d-g即可看到阴影效果"><a class="markdownIt-Anchor" href="#-0-3-重新hexo-d-g即可看到阴影效果"></a> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><br />3. 重新hexo d -g即可看到阴影效果。</h2><p>好吧，上面是随便一搜就能看到的结果。小白如我一脸懵逼，我的next主题压根就没有<code>themes/next/source/css/_custom/custom.styl</code>这个文件，我上哪去编辑去。<br />后来经过一番摸索，发现是因为next版本更新了，文件的结构也变了，我的各种版本如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Hexo</span> <span class="selector-tag">v4</span><span class="selector-class">.0</span><span class="selector-class">.0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">NexT</span><span class="selector-class">.Pisces</span> <span class="selector-tag">v7</span><span class="selector-class">.5</span><span class="selector-class">.0</span></span></pre></td></tr></table></figure><p>如果你也找不到那个custom.styl的话，正确的做法是编辑这个文件<code>\themes\next\source\css\_common\components\post\post-expand.styl</code>，然后把刚刚那段code加进去，参数可以照着自己喜欢的调。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">.posts-expand &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  padding-top: 40px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  background: white;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   //添加阴影</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   margin-top: 10px;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   margin-bottom: 60px;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   padding: 21px;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="addition">+   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  +mobile() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    padding: 10px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    line-height: 22px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    margin: 0 20px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>然后重新部署一下就能看到文章轮廓有阴影啦。</p>]]></content>
      
      
      <categories>
          
          <category> 制作博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 862. Shortest Subarray with Sum at Least K</title>
      <link href="2019/12/03/Leetcode-862-ShortestSubarraywithSumatLeastK/"/>
      <url>2019/12/03/Leetcode-862-ShortestSubarraywithSumatLeastK/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemsshortest-subarray-with-sum-at-least-k"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemsshortest-subarray-with-sum-at-least-k"></a> 【题目链接】 <a href="https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/" target="_blank" rel="noopener">https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/</a></h1><h1 id="题目难度-hard-228"><a class="markdownIt-Anchor" href="#题目难度-hard-228"></a> 【题目难度】 Hard 22.8%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Return the length of the shortest, non-empty, contiguous subarray of A with sum at least K.<br />If there is no non-empty subarray with sum at least K, return -1.<br />Example 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span> <span class="string">A</span> <span class="string">=</span> <span class="string">[1],</span> <span class="string">K</span> <span class="string">=</span> <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Output:</span> <span class="number">1</span></span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: A = [<span class="number">1</span>,<span class="number">2</span>], K = <span class="number">4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">-1</span></span></pre></td></tr></table></figure><p>Example 3:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: A = [<span class="number">2</span>,<span class="number">-1</span>,<span class="number">2</span>], K = <span class="number">3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="number">3</span></span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>待完成。。。</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Subarray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 1177. Can Make Palindrome from Substring</title>
      <link href="2019/11/30/Leetcode-1177-CanMakePalindromeFromSubstring/"/>
      <url>2019/11/30/Leetcode-1177-CanMakePalindromeFromSubstring/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemscan-make-palindrome-from-substring"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemscan-make-palindrome-from-substring"></a> 【题目链接】 <a href="https://leetcode.com/problems/can-make-palindrome-from-substring/" target="_blank" rel="noopener">https://leetcode.com/problems/can-make-palindrome-from-substring/</a></h1><h1 id="题目难度-medium-325"><a class="markdownIt-Anchor" href="#题目难度-medium-325"></a> 【题目难度】 Medium 32.5%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a string s, we make queries on substrings of s.<br />For each query <code>queries[i] = [left, right, k]</code>, we may rearrange the substring <code>s[left], ..., s[right]</code>, and then choose up to k of them to replace with any lowercase English letter.<br />If the substring is possible to be a palindrome string after the operations above, the result of the query is true. Otherwise, the result is false.<br />Return an array <code>answer[]</code>, where <code>answer[i]</code> is the result of the i-th query <code>queries[i]</code>.<br />Note that: Each letter is counted individually for replacement so if for example <code>s[left..right] = &quot;aaa&quot;</code>, and k = 2, we can only replace two of the letters.  (Also, note that the initial string s is never modified by any query.)</p><p>Example :</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Input: s = <span class="string">"abcda"</span>, queries = [[<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>]]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Output: <span class="built_in">[true</span><span class="built_in">,false</span><span class="built_in">,false</span><span class="built_in">,true</span><span class="built_in">,true</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Explanation:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">queries[<span class="number">0</span>] :<span class="built_in"> substring</span> = <span class="string">"d"</span>, <span class="literal">is</span> palidrome.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">queries[<span class="number">1</span>] :<span class="built_in"> substring</span> = <span class="string">"bc"</span>, <span class="literal">is</span><span class="built_in"> not</span> palidrome.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">queries[<span class="number">2</span>] :<span class="built_in"> substring</span> = <span class="string">"abcd"</span>, <span class="literal">is</span><span class="built_in"> not</span> palidrome after replacing <span class="keyword">only</span> <span class="number">1</span> character.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">queries[<span class="number">3</span>] :<span class="built_in"> substring</span> = <span class="string">"abcd"</span>, could be changed <span class="keyword">to</span> <span class="string">"abba"</span> which <span class="literal">is</span> palidrome. Also this can be changed <span class="keyword">to</span> <span class="string">"baab"</span> first rearrange it <span class="string">"bacd"</span> <span class="keyword">then</span><span class="built_in"> replace</span> <span class="string">"cd"</span> with <span class="string">"ab"</span>.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">queries[<span class="number">4</span>] :<span class="built_in"> substring</span> = <span class="string">"abcda"</span>, could be changed <span class="keyword">to</span> <span class="string">"abcba"</span> which <span class="literal">is</span> palidrome.</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目给一个string，给一些query。问这些query出来的substring是否能在规定的改动条件内组成回文串。比如例子中的[3, 3, 0]，抽出来的子串是d，能替换0个字符，问是否能组成回文串。答案是能。<br />这个题目吧，一把泪。一开始没有认真读题，以为是固定位置的substring，实现完了提交才发现是可以换位置的substring。所以啊，认真审题是成功解题的必要条件之一。既然可以换位置，那么判断这个字符串能否组成回文串就是count每个字符的数量了。按照惯例，count字符个数要么用HashMap要么用int[]。我比较推荐int[]，因为操作简单。因为query的起始点和终点不定，所以我们事先要count每一个位置都有什么信息。这里是一个难点，粗略一想，我需要记录起始点，终点，以及每个字符的个数，这应该是个什么样的数组呢？其实我们就用一个二维数组<code>int[n][26]</code>记录到位置n位置，每个字符出现的总次数，那么中间某一段的字符次数就能相减而得出了，这一点确实比较难想到，那我们就暂时先背下来吧（手动捂脸）。<br />有了每个字符的数量之后，我们就能知道需要经过多少次替换才能变成回文串。这里要注意的是，根据给定的字符串的长度来判断，这个回文是偶数回文还是奇数回文（如果不太了解可以参考一下<a href="http://localhost:4000/2019/11/27/Leetcode-Palindromic/" target="_blank" rel="noopener">这篇文章</a>）。如果我们知道了频率为奇数的字符有n个，那么，偶数回文就需要至少<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个替换，奇数回文就需要至少<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌈</mo><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil{\frac{n-1}{2}}\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">⌉</span></span></span></span>个替换。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Boolean&gt; <span class="title">canMakePaliQueries</span><span class="params">(String s, <span class="keyword">int</span>[][] queries)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        List&lt;Boolean&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> n = s.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">26</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j]; <span class="comment">//copy前一个位置的信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            dp[i][s.charAt(i) - <span class="string">'a'</span>]++; <span class="comment">//添加当前位置的信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queries.length; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span>[] query = queries[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> odd_count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">int</span> count = dp[query[<span class="number">1</span>]][j]; <span class="comment">//count是字符j出现的次数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span>(query[<span class="number">0</span>] != <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                    count -= dp[query[<span class="number">0</span>] - <span class="number">1</span>][j];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                odd_count += count % <span class="number">2</span> == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>; <span class="comment">//如果count是奇数那么odd_count加一</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>((query[<span class="number">1</span>] - query[<span class="number">0</span>] + <span class="number">1</span>) % <span class="number">2</span> == <span class="number">1</span>) <span class="comment">//判断给定字符串长度是偶数还是奇数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                odd_count--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            res.add(query[<span class="number">2</span>] * <span class="number">2</span> &gt;= odd_count);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 回文串 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 267. Palindrome Permutation II</title>
      <link href="2019/11/30/Leetcode-267-PalindromePermutationII/"/>
      <url>2019/11/30/Leetcode-267-PalindromePermutationII/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接-httpsleetcodecomproblemspalindrome-permutation-ii"><a class="markdownIt-Anchor" href="#题目链接-httpsleetcodecomproblemspalindrome-permutation-ii"></a> 【题目链接】 <a href="https://leetcode.com/problems/palindrome-permutation-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/palindrome-permutation-ii/</a></h1><h1 id="题目难度-medium-348"><a class="markdownIt-Anchor" href="#题目难度-medium-348"></a> 【题目难度】 Medium 34.8%</h1><a id="more"></a><h1 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 【题目描述】</h1><p>Given a string s, return all the palindromic permutations (without duplicates) of it. Return an empty list if no palindromic permutation could be form.<br />Example 1:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Input:</span> <span class="string">"aabb"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Output:</span> [<span class="string">"abba"</span>, <span class="string">"baab"</span>]</span></pre></td></tr></table></figure><p>Example 2:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Input:</span> <span class="string">"abc"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="symbol">Output:</span> []</span></pre></td></tr></table></figure><h1 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 【题目分析】</h1><p>题目还是很简明，就是给定一个string，返回所有为回文的permutation。我们就仔细想一下，要我返回所有为回文的permutation，首先给我的这个字符串至少要有可能是一个回文吧。如果做这个前期判断呢？因为回文是有偶数回文和奇数回文（如果不熟悉，可以先参考一下<a href="http://localhost:4000/2019/11/27/Leetcode-Palindromic/" target="_blank" rel="noopener">这篇文章</a>），所以我们统计一下每个字符出现的次数，如果次数为奇数的字符是小于或者等于1的话，那么这个字符串就是可以组成回文串的。<br />如果得知这个字符串可以组成回文，brute-force的想法就是列举出所有的permutation（时间复杂度为O(n!)），再对每一种可能性进行回文判断（时间复杂度为O(n/2)），如果是回文就加入结果。这样的一套想法下来，总的时间复杂度是O(n!*n/2)，其中n是给定string的长度。<br />那么，有没有可能对brute-force进行改进呢？答案当然是肯定的。在前期判断是否有可能组成回文的过程中，我们应该是用一个HashMap或者长度为128（为什么是128呢，因为ASCII码总共有128个）的int[]数组来记录每个字符的个数。有了这个信息，那这道题就变成了和<a href="https://leetcode.com/problems/generate-parentheses/" target="_blank" rel="noopener">22. Generate Parentheses</a>很相似了，不过并不需要数左右的个数，只需要同时在两边加上一样的字符。</p><h1 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 【完整代码】</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generatePalindromes</span><span class="params">(String s)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        String tmp = <span class="string">""</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c  : s.toCharArray()) <span class="comment">//记录每个字符的个数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            map[c]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.length; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map[i] % <span class="number">2</span> == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                tmp = tmp + (<span class="keyword">char</span>)i; <span class="comment">//如果遇到奇数频率的字符就记录下来</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(tmp.length() &gt; <span class="number">1</span>) <span class="keyword">return</span> res; <span class="comment">//如果奇数频率的字符超过一个就不满足组成回文条件，直接返回</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        generate(s.length(), res, map, tmp); <span class="comment">//满足条件，就dfs生成回文，要把奇数字符传进去，没有的话就是""</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> res;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> n, List&lt;String&gt; res, <span class="keyword">int</span>[] map, String tmp)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(tmp.length() == n)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            res.add(tmp);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.length; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map[i] &gt; <span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                map[i] -= <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                generate(n, res, map, (<span class="keyword">char</span>)i + tmp + (<span class="keyword">char</span>)i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                map[i] += <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 回文串 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT | 如何取消主题加载的滑动效果</title>
      <link href="2019/11/29/hexo1/"/>
      <url>2019/11/29/hexo1/</url>
      
        <content type="html"><![CDATA[<p>NexT主题是一个易用又完善的博客主题，内置的风格也就是scheme也有四种以供选择。但是每个风格都带有同样的滑动效果，就是每点击一个item，加载的页面都以animation的效果呈现。为了在夹缝中透露一点小个性的倔强，想取消这种效果也很简单。</p><a id="more"></a><p>只需要修改主题文件，也就是<code>/themes/next/_config.yml</code>。<br />用编辑器打开这个文件，然后搜索<code>motion</code>，作出如下修改就行了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">motion:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 制作博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期刊系列JF | 市场信息如何反应在股价中?</title>
      <link href="2019/11/29/jf2/"/>
      <url>2019/11/29/jf2/</url>
      
        <content type="html"><![CDATA[<p>【原文题目】 《Continuous Auctions and Insider Trading？》-- 连续时间“拍卖”与知情交易</p><a id="more"></a><p>【摘要】作者提供了一个连续时间下的动态均衡模型用于研究（1）价格所包含的信息，（2）投机市场的流通性特征，（3）信息对于知情者的价值。模型包括三类交易者：（1）唯一的知情者(风险中性)，（2）随机的噪声交易者（为方便理解我们称其为“不知情者”），（3）充分竞争市场下的做市商(风险中性)(为方便理解我们称其为“定价者”)。知情者以最优方式进行知情交易，同时噪声交易者的交易行为为知情交易提供了掩护。当“拍卖”的时间间隔缩短至0，我们即可得到一个连续时间下的模型。在这样一个均衡下，价格变化符合布朗宁运动，市场深度为常数，所有知情者的信息将被包含在市场价格里。</p><p>【关于作者】<br />AlbertP. Kyle 现为美国马里兰大学金融系教授。本文介绍的（Kyle1985）是作者于1985年发表于顶级期刊Econometrica的作品。</p><p>【关于文章】<br />假设，有一只股票现价50，但你知道在明天它的价值将为100，你又是唯一知道这个消息的人，你会买这只股票吗？你会买多少？<br />首先，请读者注意，虽然上一刻的股价为50，但你成交的价格将由做市商根据他掌握的信息来确定。做市商掌握的信息为整个市场在这一刻的总订单量（包括你的订单）。<br />请思考一下你的回答。</p><p>（Kyle 1985）给出的答案是，你不该买的太多（暴露了你的信息），也不该买的太少（还可以赚的更多）。<br />你买的数量应该由以下两个因素决定：</p><ol><li>你的信息有多大的优势；（在本例中，你是唯一的知情者，100-50为你的信息的优势）</li><li>市场上有多少不知情者交易。</li></ol><p>为什么是上述两个因素？<br />首先，请明确一下你的目标是什么？赚更多的钱（根据现有的信息优势）！<br />那么，你的目标可以表示为求这个方程的最大值：<code>(100-P)*X</code>.</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">P</span>：做市商给出的价格；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">X</span>：你购买该股票的数量；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="number">100</span>：本例中提到的你所拥有的准确价值信息。</span></pre></td></tr></table></figure><p>所以，该方程表示的是一股赚的钱乘以你购买的股票数量。因为X是你自己决定的，所以该方程中仅有P为未知量。<br />现在，请考虑一下做市商是如何定价的呢？<br />我们还是先来明确一下做市商的目标：在竞争激烈的市场中，做市商的目标是尽可能的将价格准确的定为真实价值。（读者可以理解为，在竞争激烈的环境下，他不这么做会被别的做市商抢生意）<br />但是，真实价值是100，只有你知道，并且你会根据这个信息优势来确定你的购买量，即X。<br />做市商通过观察到你的购买量X来推测真实价值。可是他拥有的唯一信息是市场上这一刻总的订单量（你的订单+所有不知情者的订单），表示为X+U.<br />这里U代表所有不知情者的订单。U是随机的，或多或少，或买或卖，这就为做市商定价增加了难度。</p><p>这下好了，你要买的数量随做市商给的价格变化（最大化你的收益方程），做市商的定价随你的购买数量变化（推测你所拥有的真实价值）！咋办？找不动点（fixed point）！（Kyle 1985）的假设保证了唯一的不动点方程。这个不动点方程确定了你的购买量（方程）与做市商的定价（方程），而且对双方（你和做市商）都是最优的。也就是说，任何偏离该不动点方程的行为都会给自己造成损失。</p><p>（Kyle1985）的模型非常简单却强大：</p><ol><li>从你的角度来说：<br />1）你知道的信息越有价值，你就是说你所知道的真实价值与现有的股票价格相差（本例中为100-50）越大，你的购买量越大；<br />2）不知情交易者的交易量U越大（为做市商定价提供了难度），你的购买量越大。</li><li>从做市商的角度来说：<br />1）这一刻总的订单量(X+U)越大，他定的价格越高；<br />2）不知情交易者的交易量U越小，他就越容易从(X+U)中推测出你的交易量X，定的价格也就越高。</li></ol><p>当然，完美的模型不存在，（Kyle 1985）最大的问题在于他无法解释现实世界中频频发生的股票操控。在他的不动点方程中，任何操控都不会带来更好的收益。<br />后面我们会再介绍到别的论文讨论：如果市场中普遍存在追涨的交易者，操控可以利用这一点获利。但是追涨的行为是不理性的，不应该在市场中普遍存在。所以股价操控为何会获利仍是学界热烈讨论的话题。<br />除此之外，不知情交易者，也称为噪声交易者（noisetrader），为何交易也是有趣却未得到很好解释的问题。（Kyle1985）为了不偏离主题，没有就此展开讨论。读者可以理解为：散户意外收获了一笔不菲的年终奖，随机选择了一只股票进行投资；或是为了买房而卖掉了此前投资的股票。有机会我们会提供有关行为金融学从心理学角度解释噪声交易的推送。</p>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JF论文 </tag>
            
            <tag> 金融 </tag>
            
            <tag> 股票 </tag>
            
            <tag> 投资 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期刊系列JF | 频繁买卖对收益的损害</title>
      <link href="2019/11/27/jf1/"/>
      <url>2019/11/27/jf1/</url>
      
        <content type="html"><![CDATA[<p>【原文题目】 《Trading Is Hazardous to Your Wealth: The Common Stock Investment Performance of Individual Investors》，于2000年发表于国际顶级金融期刊 金融杂志 Journal of Finance.</p><a id="more"></a><p>【原文作者】 巴伯（Brad Barber） 和 欧丁（Terrance Odean）</p><p>【频繁买卖是否影响股民投资的回报？】<br />影响！<br />频繁买卖会降低股民的投资回报！但只影响净收益（也就是你要收进口袋的钱），而不影响你的总收益。</p><p>数据表明：<br />1）换手率更低的投资组合 有更高的 净收益<br />2）投资组合的换手率       不影响      总收益</p><p>也就是说 股民们在 误认为 自己知道行情的情况下进行买卖操作，可事实上这些交易并没有给他们带来真正的收益（虽然也没有损害他们的收益），但高换手率造成了更高的交易费用，进而影响了股民们真正可以收入钱袋子的收益。<br />这个实证结果是 爆炸新闻！因为它通过挑战 一篇名声远扬的的文章，《On the impossibility of informationally effecient markets》，中的推断挑战了有效市场的支持者们。前诺奖得主Stiglitz在上文中运用理性预期手段，研究了在 有交易成本和信息获取成本 的情况下，有效市场将存在怎样的均衡。具体来说，大佬认为理性投资者只有在知道自己 可获得的收益 大于或等于 所有成本 的情况下才会进行交易，而由此得出的推断是 不论股民换手率（买卖次数）的高低（多少），他们的 净收益 应该接近，而买卖次数更多的股民会有 明显更高的 总收益（考虑到交易成本）。<br />实证结果明显倾向于支持 过度自信理论（出自行为金融学）。该理论认为投资者的过分自信，也就是在“错误”的认为自己知道股价走势的情况下，进行了过多的没有价值的买入和卖出。过分自信理论预测 换手率更高的 股民有 更低的 净收益，而没有对总收益作出预测。<br />其他“看似”可能的解释有：1）流通性需要，2）投资组合调整，3）税务动机 和 4）好赌心理。对于以上解释作者均做出了反驳，因为他们均无法解释高达 75% 的年平均换手率。<br />作者还提到了 冲量效应 对股民的影响，结果为 普通股民倾向于 反冲量效应 而为之。 另一篇于2008年发表于JF的文章《Individual Investor Trading and Stock Returns》更详尽的研究了这种现象。</p><p>【关于作者】<br />两位 行为金融学 的学界大佬，巴伯在 芝加哥大学 取得博士学位目前就职于 加州大学戴维斯分校，欧丁毕业于 加州大学伯克利分校 目前于本校任教。<br />两位 行为金融学大佬 于2000年前后在世界各大顶级期刊发表数篇行为金融学实证文章，笔者将会在接下来的几次推送中介绍他们的文章。</p><p>分割线以下较为学术 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">_</mi></mrow><annotation encoding="application/x-tex">\_</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:-0.31em;"></span><span class="mord" style="margin-right:0.02778em;">_</span></span></span></span></p><hr><p>【文章摘要】<br />持有普通股的个人投资者将会为积极（频繁）交易的行为付出巨大的代价。本文研究样本为1991-1996在某一大型折扣股票经纪公司进行交易的6万6千个家庭。其中交易最频繁的个人投资者群体平均得到11.4%年回报，而同时期平均市场年回报为17.9%。样本中平均家庭得到16.4%的年回报，投资偏好为高beta（收益与风险相对于市场成正比增大），小型（公司市值小），价值型（公司账面价值大于市值）普通股，平均年换手率为75%（一年中买卖股票的价值占平均股票总价值的比例）。投资者的过度自信可以解释高换手率和由此导致的较差回报。我们要传达的核心信息是：交易将会损害你的财富。</p><p>【样本数据介绍】<br />时间：1991.1-1996.12<br />来源：某大型折扣股票经纪公司<br />总量：六年中7万8千有交易记录的家庭，6万6千可用（至少持有股票一个月）<br />其他相关信息：<br />1）平均每家庭持有4.3只（公司）股票，总价值4万7千美元<br />2）在1996年12月，这些家庭持有总价值为 45亿美元 的股票<br />3）六年中，投资者共卖出 12.1亿美元 的股票，买入 12.2亿美元 的股票<br />4）平均股票成交价为 $31</p><p>【高昂的交易成本】<br />平均来说，一轮交易下来交易者会损失4%在交易成本上。<br />买卖价差：交易者平均每笔买入付出 0.3%，卖出付出 0.7%（在对共同基金的研究中也有相似结论，0.2%买入，0.6%卖出，参照 Carhart1997）<br />手续费：对于所有高于1000美元的交易：买入 1.58%， 卖出 1.45%<br />               对于所有交易：买入 2.1%，卖出 3.1%</p><p>【计算方法】<br />交易成本主要有手续费（主要于股票经理人赚取）和买卖价差（买入价格会比卖出价格高）。作者以百分比的形式报告了交易成本。<br />1）卖出价差： 当日收盘价/卖出价 - 1<br />2）买入价差： -（当日收盘价/买入价 - 1）<br />3）手续费： 手续费/成交总金额<br />作者认为他们对买卖价差的计算方式考虑到了一单交易对市场的所有可能造成的影响。</p><p>【高频率的买卖】<br />个人投资者平均每年会更新自己 75% 的股票，有趣的是这个数字与此前文献（Carhart1997）计算出的共同基金77%的年换手率很接近。</p><p>【计算方法】<br />月买入换手率: 上月买入的股票在上月月初的总价值 / 本月月初投资组合在本月月初的总价值。<br />月买出换手率: 本月卖出的股票在本月月初的总价值 / 本月月初投资组合在本月月初的总价值。</p><p>【投资回报】<br />1）相比于 投资者频繁的交易 所得的真实回报，他们若采用简单的 买入-持有策略 会得到更高的收益<br />2）投资者更倾向于持有 小型股，市场参数约为1.1（略大于市场波动），没有价值股投资倾向。（机构投资者明显的偏好持有 大型股）<br />3）小型股+高市场风险 策略 在1991-1996年期间为个人投资者提供了良好的回报</p><p>【计算方法】<br />作者使用了 1）加权总收益 和 2）加权净收益 两种方式来表现投资者回报，并使用了以下四种回报测度：<br />1）超自基准回报： 将投资者（有买卖调整的）真实收益 - 投资者若持有年初的投资组合（保持不变）的收益<br />2）超市场回报： 将投资者真实收益 - 市场指数回报<br />3）超CAPM回报： 市场无法解释的回报（将市场指数作为唯一变量进行 回归分析后所得的 截距）<br />4）超三因子回报： 市场，公司规模和价值投资策略均无法解释的回报（将三因子作为自变量进行 回归分析后所得的 截距）</p><p>** 值得一提的是作者提到了第五种可能的测度：夏普率，但是因为作者使用的样本并不是每个开户人的所有投资组合，以此样本估计的夏普率会高估部分个人投资者所承担的风险。*<br />** 为了减少因样本数据时间短引起的错误结论，作者将样本中的 72个月 分为20个月的下降期 和 52个月的上升期 分别进行分析，结果相近。*</p>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JF论文 </tag>
            
            <tag> 金融 </tag>
            
            <tag> 股票 </tag>
            
            <tag> 投资 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode | 回文字符串系列</title>
      <link href="2019/11/27/Leetcode-Palindromic/"/>
      <url>2019/11/27/Leetcode-Palindromic/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 【问题描述】</h1><p>回文字符串英文叫 palindromic string/substring。所谓“回文”，就是正着读和反着读都是相同的字符序列，例如“level”，“noon”。所有回文字符串可以分为两大类：1）奇数回文，如“level”，中间有一个单独字符，两边延展的字符都相同；2）偶数回文，如“noon”，没有中间单独字符，对折的字符都相同。所以，在遇到回文字符串的题，这两种都要考虑进来。</p><a id="more"></a><p>首先，先不看题，我们自己能想到的问题有哪些。</p><ol><li>最基本的是判断一个字符串是否是回文串。完成这个功能有两种方式：<br />a. 从最左和最右开始往里检查</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindromic</span><span class="params">(String s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> l = <span class="number">0</span>, r = s.length() - <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">while</span>(l &lt; r)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span>(s.charAt(l) != s.charAt(r))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      l++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      r--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>b. 从中间开始，往两边检查</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindromic</span><span class="params">(String s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> len = s.length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> l = (len - <span class="number">1</span>) / <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">//如果长度是奇数，r与l相等；是偶数，则l+1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">int</span> r = len % <span class="number">2</span> == <span class="number">0</span> ? l + <span class="number">1</span> : l;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">while</span>(l &gt;= <span class="number">0</span> &amp;&amp; r &lt; len)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span>(s.charAt(l) != s.charAt(r))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      l--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      r++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr></table></figure><ol start="2"><li>一些字符能否组成一个回文串。这个判断只需要count每个字符的出现次数，考虑的可能性还是偶回文和奇回文：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">CanBePalindromic</span><span class="params">(String s)</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">//因为不确定是否只有字母，所以假设s可能包含任何ASCII字符</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//既然考虑到了所有ASCII字符，就可以直接将char强转为int</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        count[(<span class="keyword">int</span>)c]++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">boolean</span> odd_flag = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n : count)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//如果之前已经出现过奇数字符，现在又出现了，就直接返回false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; odd_flag == <span class="keyword">true</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">//上面没有返回false说明目前有可能还没有出现奇数字符</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            odd_flag = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr></table></figure><h1 id="题目列表"><a class="markdownIt-Anchor" href="#题目列表"></a> 【题目列表】</h1><p>到目前为止（12/5/2019），在Leetcode里搜索Palindrome关键字会出现24道题，6道easy，7道medium，11道hard。说明回文串这个知识点是可以出到很难的题的。下面的列表中列出了easy和medium的题目，在最后一列中列出了每道题考察的关键知识点。如果在以后碰到回文串的题，就尽可能往这些知识点上想，大部分都应该能想出来。</p><table><thead><tr><th>题号</th><th>题目</th><th>难度</th><th>接受率</th><th>知识点</th><th>解答</th></tr></thead><tbody><tr><td>266</td><td><a href="https://leetcode.com/problems/palindrome-permutation" target="_blank" rel="noopener">Palindrome Permutation</a></td><td>Easy</td><td>60.8%</td><td>回文字符数</td><td><a href="https://pearmonkey.com/2019/12/07/Leetcode-266-PalindromePermutation/">link</a></td></tr><tr><td>409</td><td><a href="https://leetcode.com/problems/longest-palindrome" target="_blank" rel="noopener">Longest Palindrome</a></td><td>Easy</td><td>49.1%</td><td>回文字符数</td><td><a href="https://pearmonkey.com/2019/12/08/Leetcode-409-Longest-Palindrome/">link</a></td></tr><tr><td>9</td><td><a href="https://leetcode.com/problems/palindrome-number" target="_blank" rel="noopener">Palindrome Number</a></td><td>Easy</td><td>45.8%</td><td>回文，integer取digit</td><td><a href="https://pearmonkey.com/2019/12/09/Leetcode-9-Palindrome-Number/">link</a></td></tr><tr><td>234</td><td><a href="https://leetcode.com/problems/palindrome-linked-list" target="_blank" rel="noopener">Palindrome Linked List</a></td><td>Easy</td><td>37.4%</td><td>回文，反转list</td><td><a href="https://pearmonkey.com/2019/12/09/Leetcode-234-Palindrome-Linked-List/">link</a></td></tr><tr><td>680</td><td><a href="https://leetcode.com/problems/valid-palindrome-ii" target="_blank" rel="noopener">Valid Palindrome II</a></td><td>Easy</td><td>35.4%</td><td>回文</td><td><a href="https://pearmonkey.com/2019/12/11/Leetcode-680-Valid-Palindrome-II/">link</a></td></tr><tr><td>125</td><td><a href="https://leetcode.com/problems/valid-palindrome" target="_blank" rel="noopener">Valid Palindrome</a></td><td>Easy</td><td>33.2%</td><td>回文，字符判断</td><td><a href="https://pearmonkey.com/2019/12/11/Leetcode-125-Valid-Palindrome/">link</a></td></tr><tr><td>647</td><td><a href="https://leetcode.com/problems/palindromic-substrings" target="_blank" rel="noopener">Palindromic Substrings</a></td><td>Medium</td><td>58.5%</td><td>回文第二种判断</td><td><a href="https://pearmonkey.com/2019/12/05/Leetcode-647-PalindromicSubstring/">link</a></td></tr><tr><td>516</td><td><a href="https://leetcode.com/problems/longest-palindromic-subsequence" target="_blank" rel="noopener">Longest Palindromic Subsequence</a></td><td>Medium</td><td>49.5%</td><td>回文，动态规划</td><td><a href="https://pearmonkey.com/2019/12/11/Leetcode-516-Longest-Palindromic-Subsequence/">link</a></td></tr><tr><td>131</td><td><a href="https://leetcode.com/problems/palindrome-partitioning" target="_blank" rel="noopener">Palindrome Partitioning</a></td><td>Medium</td><td>43.7%</td><td>回文，dfs</td><td><a href="https://pearmonkey.com/2019/12/11/Leetcode-131-Palindrome-Partitioning/">link</a></td></tr><tr><td>267</td><td><a href="https://leetcode.com/problems/palindrome-permutation-ii" target="_blank" rel="noopener">Palindrome Permutation II</a></td><td>Medium</td><td>34.9%</td><td>回文生成</td><td><a href="https://pearmonkey.com/2019/11/30/Leetcode-267-PalindromePermutationII/">link</a></td></tr><tr><td>1177</td><td><a href="https://leetcode.com/problems/can-make-palindrome-from-substring" target="_blank" rel="noopener">Can Make Palindrome from Substring</a></td><td>Medium</td><td>32.5%</td><td>回文，动态规划</td><td><a href="https://pearmonkey.com/2019/11/30/Leetcode-1177-CanMakePalindromeFromSubstring/">link</a></td></tr><tr><td>5</td><td><a href="https://leetcode.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">Longest Palindromic Substring</a></td><td>Medium</td><td>28.4%</td><td>回文，动态规划</td><td><a href="https://pearmonkey.com/2019/12/11/Leetcode-5-Longest-Palindromic-Substring/">link</a></td></tr><tr><td>866</td><td><a href="https://leetcode.com/problems/prime-palindrome" target="_blank" rel="noopener">Prime Palindrome</a></td><td>Medium</td><td>22.2%</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
